// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: pam.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PAM_TokenAuth_FullMethodName       = "/pam.PAM/TokenAuth"
	PAM_InteractiveAuth_FullMethodName = "/pam.PAM/InteractiveAuth"
	PAM_Authorize_FullMethodName       = "/pam.PAM/Authorize"
)

// PAMClient is the client API for PAM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PAMClient interface {
	TokenAuth(ctx context.Context, in *TokenAuthRequest, opts ...grpc.CallOption) (*TokenAuthResponse, error)
	InteractiveAuth(ctx context.Context, in *InteractiveAuthRequest, opts ...grpc.CallOption) (*InteractiveChallenge, error)
	Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*PAMAuthorizationResponse, error)
}

type pAMClient struct {
	cc grpc.ClientConnInterface
}

func NewPAMClient(cc grpc.ClientConnInterface) PAMClient {
	return &pAMClient{cc}
}

func (c *pAMClient) TokenAuth(ctx context.Context, in *TokenAuthRequest, opts ...grpc.CallOption) (*TokenAuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenAuthResponse)
	err := c.cc.Invoke(ctx, PAM_TokenAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pAMClient) InteractiveAuth(ctx context.Context, in *InteractiveAuthRequest, opts ...grpc.CallOption) (*InteractiveChallenge, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InteractiveChallenge)
	err := c.cc.Invoke(ctx, PAM_InteractiveAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pAMClient) Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*PAMAuthorizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PAMAuthorizationResponse)
	err := c.cc.Invoke(ctx, PAM_Authorize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PAMServer is the server API for PAM service.
// All implementations must embed UnimplementedPAMServer
// for forward compatibility.
type PAMServer interface {
	TokenAuth(context.Context, *TokenAuthRequest) (*TokenAuthResponse, error)
	InteractiveAuth(context.Context, *InteractiveAuthRequest) (*InteractiveChallenge, error)
	Authorize(context.Context, *AuthorizeRequest) (*PAMAuthorizationResponse, error)
	mustEmbedUnimplementedPAMServer()
}

// UnimplementedPAMServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPAMServer struct{}

func (UnimplementedPAMServer) TokenAuth(context.Context, *TokenAuthRequest) (*TokenAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenAuth not implemented")
}
func (UnimplementedPAMServer) InteractiveAuth(context.Context, *InteractiveAuthRequest) (*InteractiveChallenge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InteractiveAuth not implemented")
}
func (UnimplementedPAMServer) Authorize(context.Context, *AuthorizeRequest) (*PAMAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedPAMServer) mustEmbedUnimplementedPAMServer() {}
func (UnimplementedPAMServer) testEmbeddedByValue()             {}

// UnsafePAMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PAMServer will
// result in compilation errors.
type UnsafePAMServer interface {
	mustEmbedUnimplementedPAMServer()
}

func RegisterPAMServer(s grpc.ServiceRegistrar, srv PAMServer) {
	// If the following call pancis, it indicates UnimplementedPAMServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PAM_ServiceDesc, srv)
}

func _PAM_TokenAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PAMServer).TokenAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PAM_TokenAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PAMServer).TokenAuth(ctx, req.(*TokenAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PAM_InteractiveAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractiveAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PAMServer).InteractiveAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PAM_InteractiveAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PAMServer).InteractiveAuth(ctx, req.(*InteractiveAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PAM_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PAMServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PAM_Authorize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PAMServer).Authorize(ctx, req.(*AuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PAM_ServiceDesc is the grpc.ServiceDesc for PAM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PAM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pam.PAM",
	HandlerType: (*PAMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TokenAuth",
			Handler:    _PAM_TokenAuth_Handler,
		},
		{
			MethodName: "InteractiveAuth",
			Handler:    _PAM_InteractiveAuth_Handler,
		},
		{
			MethodName: "Authorize",
			Handler:    _PAM_Authorize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pam.proto",
}
