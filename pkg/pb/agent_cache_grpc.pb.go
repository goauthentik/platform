// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: agent_cache.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgentCache_CacheGet_FullMethodName = "/agent_cache.AgentCache/CacheGet"
	AgentCache_CacheSet_FullMethodName = "/agent_cache.AgentCache/CacheSet"
)

// AgentCacheClient is the client API for AgentCache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentCacheClient interface {
	CacheGet(ctx context.Context, in *CacheGetRequest, opts ...grpc.CallOption) (*CacheGetResponse, error)
	CacheSet(ctx context.Context, in *CacheSetRequest, opts ...grpc.CallOption) (*CacheSetResponse, error)
}

type agentCacheClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentCacheClient(cc grpc.ClientConnInterface) AgentCacheClient {
	return &agentCacheClient{cc}
}

func (c *agentCacheClient) CacheGet(ctx context.Context, in *CacheGetRequest, opts ...grpc.CallOption) (*CacheGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CacheGetResponse)
	err := c.cc.Invoke(ctx, AgentCache_CacheGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentCacheClient) CacheSet(ctx context.Context, in *CacheSetRequest, opts ...grpc.CallOption) (*CacheSetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CacheSetResponse)
	err := c.cc.Invoke(ctx, AgentCache_CacheSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentCacheServer is the server API for AgentCache service.
// All implementations must embed UnimplementedAgentCacheServer
// for forward compatibility.
type AgentCacheServer interface {
	CacheGet(context.Context, *CacheGetRequest) (*CacheGetResponse, error)
	CacheSet(context.Context, *CacheSetRequest) (*CacheSetResponse, error)
	mustEmbedUnimplementedAgentCacheServer()
}

// UnimplementedAgentCacheServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentCacheServer struct{}

func (UnimplementedAgentCacheServer) CacheGet(context.Context, *CacheGetRequest) (*CacheGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheGet not implemented")
}
func (UnimplementedAgentCacheServer) CacheSet(context.Context, *CacheSetRequest) (*CacheSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheSet not implemented")
}
func (UnimplementedAgentCacheServer) mustEmbedUnimplementedAgentCacheServer() {}
func (UnimplementedAgentCacheServer) testEmbeddedByValue()                    {}

// UnsafeAgentCacheServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentCacheServer will
// result in compilation errors.
type UnsafeAgentCacheServer interface {
	mustEmbedUnimplementedAgentCacheServer()
}

func RegisterAgentCacheServer(s grpc.ServiceRegistrar, srv AgentCacheServer) {
	// If the following call pancis, it indicates UnimplementedAgentCacheServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentCache_ServiceDesc, srv)
}

func _AgentCache_CacheGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentCacheServer).CacheGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentCache_CacheGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentCacheServer).CacheGet(ctx, req.(*CacheGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentCache_CacheSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentCacheServer).CacheSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentCache_CacheSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentCacheServer).CacheSet(ctx, req.(*CacheSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentCache_ServiceDesc is the grpc.ServiceDesc for AgentCache service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentCache_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent_cache.AgentCache",
	HandlerType: (*AgentCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CacheGet",
			Handler:    _AgentCache_CacheGet_Handler,
		},
		{
			MethodName: "CacheSet",
			Handler:    _AgentCache_CacheSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent_cache.proto",
}
