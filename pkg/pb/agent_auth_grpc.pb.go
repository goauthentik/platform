// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: agent_auth.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgentAuth_WhoAmI_FullMethodName              = "/agent_auth.AgentAuth/WhoAmI"
	AgentAuth_GetCurrentToken_FullMethodName     = "/agent_auth.AgentAuth/GetCurrentToken"
	AgentAuth_CachedTokenExchange_FullMethodName = "/agent_auth.AgentAuth/CachedTokenExchange"
	AgentAuth_Authorize_FullMethodName           = "/agent_auth.AgentAuth/Authorize"
)

// AgentAuthClient is the client API for AgentAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentAuthClient interface {
	WhoAmI(ctx context.Context, in *WhoAmIRequest, opts ...grpc.CallOption) (*WhoAmIResponse, error)
	GetCurrentToken(ctx context.Context, in *CurrentTokenRequest, opts ...grpc.CallOption) (*CurrentTokenResponse, error)
	CachedTokenExchange(ctx context.Context, in *TokenExchangeRequest, opts ...grpc.CallOption) (*TokenExchangeResponse, error)
	Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error)
}

type agentAuthClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentAuthClient(cc grpc.ClientConnInterface) AgentAuthClient {
	return &agentAuthClient{cc}
}

func (c *agentAuthClient) WhoAmI(ctx context.Context, in *WhoAmIRequest, opts ...grpc.CallOption) (*WhoAmIResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WhoAmIResponse)
	err := c.cc.Invoke(ctx, AgentAuth_WhoAmI_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAuthClient) GetCurrentToken(ctx context.Context, in *CurrentTokenRequest, opts ...grpc.CallOption) (*CurrentTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CurrentTokenResponse)
	err := c.cc.Invoke(ctx, AgentAuth_GetCurrentToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAuthClient) CachedTokenExchange(ctx context.Context, in *TokenExchangeRequest, opts ...grpc.CallOption) (*TokenExchangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenExchangeResponse)
	err := c.cc.Invoke(ctx, AgentAuth_CachedTokenExchange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAuthClient) Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthorizeResponse)
	err := c.cc.Invoke(ctx, AgentAuth_Authorize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentAuthServer is the server API for AgentAuth service.
// All implementations must embed UnimplementedAgentAuthServer
// for forward compatibility.
type AgentAuthServer interface {
	WhoAmI(context.Context, *WhoAmIRequest) (*WhoAmIResponse, error)
	GetCurrentToken(context.Context, *CurrentTokenRequest) (*CurrentTokenResponse, error)
	CachedTokenExchange(context.Context, *TokenExchangeRequest) (*TokenExchangeResponse, error)
	Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error)
	mustEmbedUnimplementedAgentAuthServer()
}

// UnimplementedAgentAuthServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentAuthServer struct{}

func (UnimplementedAgentAuthServer) WhoAmI(context.Context, *WhoAmIRequest) (*WhoAmIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoAmI not implemented")
}
func (UnimplementedAgentAuthServer) GetCurrentToken(context.Context, *CurrentTokenRequest) (*CurrentTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentToken not implemented")
}
func (UnimplementedAgentAuthServer) CachedTokenExchange(context.Context, *TokenExchangeRequest) (*TokenExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CachedTokenExchange not implemented")
}
func (UnimplementedAgentAuthServer) Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedAgentAuthServer) mustEmbedUnimplementedAgentAuthServer() {}
func (UnimplementedAgentAuthServer) testEmbeddedByValue()                   {}

// UnsafeAgentAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentAuthServer will
// result in compilation errors.
type UnsafeAgentAuthServer interface {
	mustEmbedUnimplementedAgentAuthServer()
}

func RegisterAgentAuthServer(s grpc.ServiceRegistrar, srv AgentAuthServer) {
	// If the following call pancis, it indicates UnimplementedAgentAuthServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentAuth_ServiceDesc, srv)
}

func _AgentAuth_WhoAmI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoAmIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAuthServer).WhoAmI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentAuth_WhoAmI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAuthServer).WhoAmI(ctx, req.(*WhoAmIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAuth_GetCurrentToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAuthServer).GetCurrentToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentAuth_GetCurrentToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAuthServer).GetCurrentToken(ctx, req.(*CurrentTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAuth_CachedTokenExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAuthServer).CachedTokenExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentAuth_CachedTokenExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAuthServer).CachedTokenExchange(ctx, req.(*TokenExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAuth_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAuthServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentAuth_Authorize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAuthServer).Authorize(ctx, req.(*AuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentAuth_ServiceDesc is the grpc.ServiceDesc for AgentAuth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentAuth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent_auth.AgentAuth",
	HandlerType: (*AgentAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WhoAmI",
			Handler:    _AgentAuth_WhoAmI_Handler,
		},
		{
			MethodName: "GetCurrentToken",
			Handler:    _AgentAuth_GetCurrentToken_Handler,
		},
		{
			MethodName: "CachedTokenExchange",
			Handler:    _AgentAuth_CachedTokenExchange_Handler,
		},
		{
			MethodName: "Authorize",
			Handler:    _AgentAuth_Authorize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent_auth.proto",
}
