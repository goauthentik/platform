// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: agent_cache.proto

#include "agent_cache.pb.h"
#include "agent_cache.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace agent_cache {

static const char* AgentCache_method_names[] = {
  "/agent_cache.AgentCache/CacheGet",
  "/agent_cache.AgentCache/CacheSet",
};

std::unique_ptr< AgentCache::Stub> AgentCache::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AgentCache::Stub> stub(new AgentCache::Stub(channel, options));
  return stub;
}

AgentCache::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CacheGet_(AgentCache_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CacheSet_(AgentCache_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AgentCache::Stub::CacheGet(::grpc::ClientContext* context, const ::agent_cache::CacheGetRequest& request, ::agent_cache::CacheGetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent_cache::CacheGetRequest, ::agent_cache::CacheGetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CacheGet_, context, request, response);
}

void AgentCache::Stub::async::CacheGet(::grpc::ClientContext* context, const ::agent_cache::CacheGetRequest* request, ::agent_cache::CacheGetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent_cache::CacheGetRequest, ::agent_cache::CacheGetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CacheGet_, context, request, response, std::move(f));
}

void AgentCache::Stub::async::CacheGet(::grpc::ClientContext* context, const ::agent_cache::CacheGetRequest* request, ::agent_cache::CacheGetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CacheGet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent_cache::CacheGetResponse>* AgentCache::Stub::PrepareAsyncCacheGetRaw(::grpc::ClientContext* context, const ::agent_cache::CacheGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent_cache::CacheGetResponse, ::agent_cache::CacheGetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CacheGet_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent_cache::CacheGetResponse>* AgentCache::Stub::AsyncCacheGetRaw(::grpc::ClientContext* context, const ::agent_cache::CacheGetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCacheGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgentCache::Stub::CacheSet(::grpc::ClientContext* context, const ::agent_cache::CacheSetRequest& request, ::agent_cache::CacheSetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent_cache::CacheSetRequest, ::agent_cache::CacheSetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CacheSet_, context, request, response);
}

void AgentCache::Stub::async::CacheSet(::grpc::ClientContext* context, const ::agent_cache::CacheSetRequest* request, ::agent_cache::CacheSetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent_cache::CacheSetRequest, ::agent_cache::CacheSetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CacheSet_, context, request, response, std::move(f));
}

void AgentCache::Stub::async::CacheSet(::grpc::ClientContext* context, const ::agent_cache::CacheSetRequest* request, ::agent_cache::CacheSetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CacheSet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent_cache::CacheSetResponse>* AgentCache::Stub::PrepareAsyncCacheSetRaw(::grpc::ClientContext* context, const ::agent_cache::CacheSetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent_cache::CacheSetResponse, ::agent_cache::CacheSetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CacheSet_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent_cache::CacheSetResponse>* AgentCache::Stub::AsyncCacheSetRaw(::grpc::ClientContext* context, const ::agent_cache::CacheSetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCacheSetRaw(context, request, cq);
  result->StartCall();
  return result;
}

AgentCache::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgentCache_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgentCache::Service, ::agent_cache::CacheGetRequest, ::agent_cache::CacheGetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgentCache::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent_cache::CacheGetRequest* req,
             ::agent_cache::CacheGetResponse* resp) {
               return service->CacheGet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgentCache_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgentCache::Service, ::agent_cache::CacheSetRequest, ::agent_cache::CacheSetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgentCache::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent_cache::CacheSetRequest* req,
             ::agent_cache::CacheSetResponse* resp) {
               return service->CacheSet(ctx, req, resp);
             }, this)));
}

AgentCache::Service::~Service() {
}

::grpc::Status AgentCache::Service::CacheGet(::grpc::ServerContext* context, const ::agent_cache::CacheGetRequest* request, ::agent_cache::CacheGetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgentCache::Service::CacheSet(::grpc::ServerContext* context, const ::agent_cache::CacheSetRequest* request, ::agent_cache::CacheSetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace agent_cache
#include <grpcpp/ports_undef.inc>

