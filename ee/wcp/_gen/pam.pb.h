// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: pam.proto
// Protobuf C++ Version: 6.33.0

#ifndef pam_2eproto_2epb_2eh
#define pam_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6033000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "agent.pb.h"
#include "agent_auth.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_pam_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_pam_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_pam_2eproto;
}  // extern "C"
namespace pam {
enum InteractiveAuthResult : int;
extern const uint32_t InteractiveAuthResult_internal_data_[];
enum InteractiveChallenge_PromptMeta : int;
extern const uint32_t InteractiveChallenge_PromptMeta_internal_data_[];
class InteractiveAuthContinueRequest;
struct InteractiveAuthContinueRequestDefaultTypeInternal;
extern InteractiveAuthContinueRequestDefaultTypeInternal _InteractiveAuthContinueRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull InteractiveAuthContinueRequest_class_data_;
class InteractiveAuthInitRequest;
struct InteractiveAuthInitRequestDefaultTypeInternal;
extern InteractiveAuthInitRequestDefaultTypeInternal _InteractiveAuthInitRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull InteractiveAuthInitRequest_class_data_;
class InteractiveAuthRequest;
struct InteractiveAuthRequestDefaultTypeInternal;
extern InteractiveAuthRequestDefaultTypeInternal _InteractiveAuthRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull InteractiveAuthRequest_class_data_;
class InteractiveChallenge;
struct InteractiveChallengeDefaultTypeInternal;
extern InteractiveChallengeDefaultTypeInternal _InteractiveChallenge_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull InteractiveChallenge_class_data_;
class PAMAuthorizationResponse;
struct PAMAuthorizationResponseDefaultTypeInternal;
extern PAMAuthorizationResponseDefaultTypeInternal _PAMAuthorizationResponse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull PAMAuthorizationResponse_class_data_;
class TokenAuthRequest;
struct TokenAuthRequestDefaultTypeInternal;
extern TokenAuthRequestDefaultTypeInternal _TokenAuthRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull TokenAuthRequest_class_data_;
class TokenAuthResponse;
struct TokenAuthResponseDefaultTypeInternal;
extern TokenAuthResponseDefaultTypeInternal _TokenAuthResponse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull TokenAuthResponse_class_data_;
}  // namespace pam
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::pam::InteractiveAuthResult_internal_data_>
    internal::EnumTraitsImpl::value<::pam::InteractiveAuthResult>;
template <>
internal::EnumTraitsT<::pam::InteractiveChallenge_PromptMeta_internal_data_>
    internal::EnumTraitsImpl::value<::pam::InteractiveChallenge_PromptMeta>;
}  // namespace protobuf
}  // namespace google

namespace pam {
enum InteractiveChallenge_PromptMeta : int {
  InteractiveChallenge_PromptMeta_UNSPECIFIED = 0,
  InteractiveChallenge_PromptMeta_PAM_PROMPT_ECHO_OFF = 1,
  InteractiveChallenge_PromptMeta_PAM_PROMPT_ECHO_ON = 2,
  InteractiveChallenge_PromptMeta_PAM_ERROR_MSG = 3,
  InteractiveChallenge_PromptMeta_PAM_TEXT_INFO = 4,
  InteractiveChallenge_PromptMeta_PAM_RADIO_TYPE = 5,
  InteractiveChallenge_PromptMeta_PAM_BINARY_PROMPT = 7,
  InteractiveChallenge_PromptMeta_PASSWORD = 100,
  InteractiveChallenge_PromptMeta_InteractiveChallenge_PromptMeta_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  InteractiveChallenge_PromptMeta_InteractiveChallenge_PromptMeta_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t InteractiveChallenge_PromptMeta_internal_data_[];
inline constexpr InteractiveChallenge_PromptMeta InteractiveChallenge_PromptMeta_PromptMeta_MIN =
    static_cast<InteractiveChallenge_PromptMeta>(0);
inline constexpr InteractiveChallenge_PromptMeta InteractiveChallenge_PromptMeta_PromptMeta_MAX =
    static_cast<InteractiveChallenge_PromptMeta>(100);
inline bool InteractiveChallenge_PromptMeta_IsValid(int value) {
  return ::google::protobuf::internal::ValidateEnum(value, InteractiveChallenge_PromptMeta_internal_data_);
}
inline constexpr int InteractiveChallenge_PromptMeta_PromptMeta_ARRAYSIZE = 100 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL InteractiveChallenge_PromptMeta_descriptor();
template <typename T>
const ::std::string& InteractiveChallenge_PromptMeta_Name(T value) {
  static_assert(::std::is_same<T, InteractiveChallenge_PromptMeta>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to PromptMeta_Name().");
  return ::google::protobuf::internal::NameOfEnum(InteractiveChallenge_PromptMeta_descriptor(), value);
}
inline bool InteractiveChallenge_PromptMeta_Parse(
    ::absl::string_view name, InteractiveChallenge_PromptMeta* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<InteractiveChallenge_PromptMeta>(InteractiveChallenge_PromptMeta_descriptor(), name,
                                           value);
}
enum InteractiveAuthResult : int {
  PAM_SUCCESS = 0,
  PAM_PERM_DENIED = 6,
  PAM_AUTH_ERR = 7,
  InteractiveAuthResult_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  InteractiveAuthResult_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t InteractiveAuthResult_internal_data_[];
inline constexpr InteractiveAuthResult InteractiveAuthResult_MIN =
    static_cast<InteractiveAuthResult>(0);
inline constexpr InteractiveAuthResult InteractiveAuthResult_MAX =
    static_cast<InteractiveAuthResult>(7);
inline bool InteractiveAuthResult_IsValid(int value) {
  return 0 <= value && value <= 7 && ((193u >> value) & 1) != 0;
}
inline constexpr int InteractiveAuthResult_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL InteractiveAuthResult_descriptor();
template <typename T>
const ::std::string& InteractiveAuthResult_Name(T value) {
  static_assert(::std::is_same<T, InteractiveAuthResult>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to InteractiveAuthResult_Name().");
  return InteractiveAuthResult_Name(static_cast<InteractiveAuthResult>(value));
}
template <>
inline const ::std::string& InteractiveAuthResult_Name(InteractiveAuthResult value) {
  return ::google::protobuf::internal::NameOfDenseEnum<InteractiveAuthResult_descriptor, 0, 7>(
      static_cast<int>(value));
}
inline bool InteractiveAuthResult_Parse(
    ::absl::string_view name, InteractiveAuthResult* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<InteractiveAuthResult>(InteractiveAuthResult_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class TokenAuthRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:pam.TokenAuthRequest) */ {
 public:
  inline TokenAuthRequest() : TokenAuthRequest(nullptr) {}
  ~TokenAuthRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TokenAuthRequest* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TokenAuthRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TokenAuthRequest(::google::protobuf::internal::ConstantInitialized);

  inline TokenAuthRequest(const TokenAuthRequest& from) : TokenAuthRequest(nullptr, from) {}
  inline TokenAuthRequest(TokenAuthRequest&& from) noexcept
      : TokenAuthRequest(nullptr, ::std::move(from)) {}
  inline TokenAuthRequest& operator=(const TokenAuthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenAuthRequest& operator=(TokenAuthRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenAuthRequest& default_instance() {
    return *reinterpret_cast<const TokenAuthRequest*>(
        &_TokenAuthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(TokenAuthRequest& a, TokenAuthRequest& b) { a.Swap(&b); }
  inline void Swap(TokenAuthRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenAuthRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenAuthRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TokenAuthRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TokenAuthRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TokenAuthRequest& from) { TokenAuthRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TokenAuthRequest* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "pam.TokenAuthRequest"; }

  explicit TokenAuthRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TokenAuthRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TokenAuthRequest& from);
  TokenAuthRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TokenAuthRequest&& from) noexcept
      : TokenAuthRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
    kTokenFieldNumber = 2,
  };
  // string username = 1;
  void clear_username() ;
  const ::std::string& username() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_username();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_username();
  void set_allocated_username(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_username() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_username(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_username();

  public:
  // string token = 2;
  void clear_token() ;
  const ::std::string& token() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_token();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_token();
  void set_allocated_token(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_token() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_token(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_token();

  public:
  // @@protoc_insertion_point(class_scope:pam.TokenAuthRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 42,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TokenAuthRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr token_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pam_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull TokenAuthRequest_class_data_;
// -------------------------------------------------------------------

class InteractiveChallenge final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:pam.InteractiveChallenge) */ {
 public:
  inline InteractiveChallenge() : InteractiveChallenge(nullptr) {}
  ~InteractiveChallenge() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(InteractiveChallenge* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(InteractiveChallenge));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InteractiveChallenge(::google::protobuf::internal::ConstantInitialized);

  inline InteractiveChallenge(const InteractiveChallenge& from) : InteractiveChallenge(nullptr, from) {}
  inline InteractiveChallenge(InteractiveChallenge&& from) noexcept
      : InteractiveChallenge(nullptr, ::std::move(from)) {}
  inline InteractiveChallenge& operator=(const InteractiveChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  inline InteractiveChallenge& operator=(InteractiveChallenge&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InteractiveChallenge& default_instance() {
    return *reinterpret_cast<const InteractiveChallenge*>(
        &_InteractiveChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(InteractiveChallenge& a, InteractiveChallenge& b) { a.Swap(&b); }
  inline void Swap(InteractiveChallenge* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InteractiveChallenge* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InteractiveChallenge* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<InteractiveChallenge>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InteractiveChallenge& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const InteractiveChallenge& from) { InteractiveChallenge::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(InteractiveChallenge* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "pam.InteractiveChallenge"; }

  explicit InteractiveChallenge(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  InteractiveChallenge(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const InteractiveChallenge& from);
  InteractiveChallenge(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, InteractiveChallenge&& from) noexcept
      : InteractiveChallenge(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using PromptMeta = InteractiveChallenge_PromptMeta;
  static constexpr PromptMeta UNSPECIFIED = InteractiveChallenge_PromptMeta_UNSPECIFIED;
  static constexpr PromptMeta PAM_PROMPT_ECHO_OFF = InteractiveChallenge_PromptMeta_PAM_PROMPT_ECHO_OFF;
  static constexpr PromptMeta PAM_PROMPT_ECHO_ON = InteractiveChallenge_PromptMeta_PAM_PROMPT_ECHO_ON;
  static constexpr PromptMeta PAM_ERROR_MSG = InteractiveChallenge_PromptMeta_PAM_ERROR_MSG;
  static constexpr PromptMeta PAM_TEXT_INFO = InteractiveChallenge_PromptMeta_PAM_TEXT_INFO;
  static constexpr PromptMeta PAM_RADIO_TYPE = InteractiveChallenge_PromptMeta_PAM_RADIO_TYPE;
  static constexpr PromptMeta PAM_BINARY_PROMPT = InteractiveChallenge_PromptMeta_PAM_BINARY_PROMPT;
  static constexpr PromptMeta PASSWORD = InteractiveChallenge_PromptMeta_PASSWORD;
  static inline bool PromptMeta_IsValid(int value) {
    return InteractiveChallenge_PromptMeta_IsValid(value);
  }
  static constexpr PromptMeta PromptMeta_MIN = InteractiveChallenge_PromptMeta_PromptMeta_MIN;
  static constexpr PromptMeta PromptMeta_MAX = InteractiveChallenge_PromptMeta_PromptMeta_MAX;
  static constexpr int PromptMeta_ARRAYSIZE = InteractiveChallenge_PromptMeta_PromptMeta_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL PromptMeta_descriptor() {
    return InteractiveChallenge_PromptMeta_descriptor();
  }
  template <typename T>
  static inline const ::std::string& PromptMeta_Name(T value) {
    return InteractiveChallenge_PromptMeta_Name(value);
  }
  static inline bool PromptMeta_Parse(
      ::absl::string_view name, PromptMeta* PROTOBUF_NONNULL value) {
    return InteractiveChallenge_PromptMeta_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kTxidFieldNumber = 1,
    kPromptFieldNumber = 4,
    kDebugInfoFieldNumber = 6,
    kFinishedFieldNumber = 2,
    kResultFieldNumber = 3,
    kPromptMetaFieldNumber = 5,
  };
  // string txid = 1;
  void clear_txid() ;
  const ::std::string& txid() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_txid(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_txid();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_txid();
  void set_allocated_txid(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_txid() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_txid(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_txid();

  public:
  // string prompt = 4;
  void clear_prompt() ;
  const ::std::string& prompt() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_prompt(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_prompt();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_prompt();
  void set_allocated_prompt(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_prompt() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_prompt(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_prompt();

  public:
  // string debug_info = 6;
  void clear_debug_info() ;
  const ::std::string& debug_info() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_debug_info(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_debug_info();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_debug_info();
  void set_allocated_debug_info(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_debug_info() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_debug_info(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_debug_info();

  public:
  // bool finished = 2;
  void clear_finished() ;
  bool finished() const;
  void set_finished(bool value);

  private:
  bool _internal_finished() const;
  void _internal_set_finished(bool value);

  public:
  // .pam.InteractiveAuthResult result = 3;
  void clear_result() ;
  ::pam::InteractiveAuthResult result() const;
  void set_result(::pam::InteractiveAuthResult value);

  private:
  ::pam::InteractiveAuthResult _internal_result() const;
  void _internal_set_result(::pam::InteractiveAuthResult value);

  public:
  // .pam.InteractiveChallenge.PromptMeta prompt_meta = 5;
  void clear_prompt_meta() ;
  ::pam::InteractiveChallenge_PromptMeta prompt_meta() const;
  void set_prompt_meta(::pam::InteractiveChallenge_PromptMeta value);

  private:
  ::pam::InteractiveChallenge_PromptMeta _internal_prompt_meta() const;
  void _internal_set_prompt_meta(::pam::InteractiveChallenge_PromptMeta value);

  public:
  // @@protoc_insertion_point(class_scope:pam.InteractiveChallenge)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6,
                                   0, 53,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const InteractiveChallenge& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr txid_;
    ::google::protobuf::internal::ArenaStringPtr prompt_;
    ::google::protobuf::internal::ArenaStringPtr debug_info_;
    bool finished_;
    int result_;
    int prompt_meta_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pam_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull InteractiveChallenge_class_data_;
// -------------------------------------------------------------------

class InteractiveAuthInitRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:pam.InteractiveAuthInitRequest) */ {
 public:
  inline InteractiveAuthInitRequest() : InteractiveAuthInitRequest(nullptr) {}
  ~InteractiveAuthInitRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(InteractiveAuthInitRequest* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(InteractiveAuthInitRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InteractiveAuthInitRequest(::google::protobuf::internal::ConstantInitialized);

  inline InteractiveAuthInitRequest(const InteractiveAuthInitRequest& from) : InteractiveAuthInitRequest(nullptr, from) {}
  inline InteractiveAuthInitRequest(InteractiveAuthInitRequest&& from) noexcept
      : InteractiveAuthInitRequest(nullptr, ::std::move(from)) {}
  inline InteractiveAuthInitRequest& operator=(const InteractiveAuthInitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InteractiveAuthInitRequest& operator=(InteractiveAuthInitRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InteractiveAuthInitRequest& default_instance() {
    return *reinterpret_cast<const InteractiveAuthInitRequest*>(
        &_InteractiveAuthInitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(InteractiveAuthInitRequest& a, InteractiveAuthInitRequest& b) { a.Swap(&b); }
  inline void Swap(InteractiveAuthInitRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InteractiveAuthInitRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InteractiveAuthInitRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<InteractiveAuthInitRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InteractiveAuthInitRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const InteractiveAuthInitRequest& from) { InteractiveAuthInitRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(InteractiveAuthInitRequest* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "pam.InteractiveAuthInitRequest"; }

  explicit InteractiveAuthInitRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  InteractiveAuthInitRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const InteractiveAuthInitRequest& from);
  InteractiveAuthInitRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, InteractiveAuthInitRequest&& from) noexcept
      : InteractiveAuthInitRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username() ;
  const ::std::string& username() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_username();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_username();
  void set_allocated_username(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_username() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_username(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_username();

  public:
  // string password = 2;
  void clear_password() ;
  const ::std::string& password() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_password();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_password();
  void set_allocated_password(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_password() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_password(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:pam.InteractiveAuthInitRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 55,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const InteractiveAuthInitRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pam_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull InteractiveAuthInitRequest_class_data_;
// -------------------------------------------------------------------

class InteractiveAuthContinueRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:pam.InteractiveAuthContinueRequest) */ {
 public:
  inline InteractiveAuthContinueRequest() : InteractiveAuthContinueRequest(nullptr) {}
  ~InteractiveAuthContinueRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(InteractiveAuthContinueRequest* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(InteractiveAuthContinueRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InteractiveAuthContinueRequest(::google::protobuf::internal::ConstantInitialized);

  inline InteractiveAuthContinueRequest(const InteractiveAuthContinueRequest& from) : InteractiveAuthContinueRequest(nullptr, from) {}
  inline InteractiveAuthContinueRequest(InteractiveAuthContinueRequest&& from) noexcept
      : InteractiveAuthContinueRequest(nullptr, ::std::move(from)) {}
  inline InteractiveAuthContinueRequest& operator=(const InteractiveAuthContinueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InteractiveAuthContinueRequest& operator=(InteractiveAuthContinueRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InteractiveAuthContinueRequest& default_instance() {
    return *reinterpret_cast<const InteractiveAuthContinueRequest*>(
        &_InteractiveAuthContinueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(InteractiveAuthContinueRequest& a, InteractiveAuthContinueRequest& b) { a.Swap(&b); }
  inline void Swap(InteractiveAuthContinueRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InteractiveAuthContinueRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InteractiveAuthContinueRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<InteractiveAuthContinueRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InteractiveAuthContinueRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const InteractiveAuthContinueRequest& from) { InteractiveAuthContinueRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(InteractiveAuthContinueRequest* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "pam.InteractiveAuthContinueRequest"; }

  explicit InteractiveAuthContinueRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  InteractiveAuthContinueRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const InteractiveAuthContinueRequest& from);
  InteractiveAuthContinueRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, InteractiveAuthContinueRequest&& from) noexcept
      : InteractiveAuthContinueRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTxidFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string txid = 1;
  void clear_txid() ;
  const ::std::string& txid() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_txid(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_txid();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_txid();
  void set_allocated_txid(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_txid() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_txid(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_txid();

  public:
  // string value = 2;
  void clear_value() ;
  const ::std::string& value() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_value();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_value();
  void set_allocated_value(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_value() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_value(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:pam.InteractiveAuthContinueRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 52,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const InteractiveAuthContinueRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr txid_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pam_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull InteractiveAuthContinueRequest_class_data_;
// -------------------------------------------------------------------

class InteractiveAuthRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:pam.InteractiveAuthRequest) */ {
 public:
  inline InteractiveAuthRequest() : InteractiveAuthRequest(nullptr) {}
  ~InteractiveAuthRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(InteractiveAuthRequest* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(InteractiveAuthRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InteractiveAuthRequest(::google::protobuf::internal::ConstantInitialized);

  inline InteractiveAuthRequest(const InteractiveAuthRequest& from) : InteractiveAuthRequest(nullptr, from) {}
  inline InteractiveAuthRequest(InteractiveAuthRequest&& from) noexcept
      : InteractiveAuthRequest(nullptr, ::std::move(from)) {}
  inline InteractiveAuthRequest& operator=(const InteractiveAuthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InteractiveAuthRequest& operator=(InteractiveAuthRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InteractiveAuthRequest& default_instance() {
    return *reinterpret_cast<const InteractiveAuthRequest*>(
        &_InteractiveAuthRequest_default_instance_);
  }
  enum InteractiveAuthCase {
    kInit = 1,
    kContinue = 2,
    INTERACTIVE_AUTH_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(InteractiveAuthRequest& a, InteractiveAuthRequest& b) { a.Swap(&b); }
  inline void Swap(InteractiveAuthRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InteractiveAuthRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InteractiveAuthRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<InteractiveAuthRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InteractiveAuthRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const InteractiveAuthRequest& from) { InteractiveAuthRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(InteractiveAuthRequest* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "pam.InteractiveAuthRequest"; }

  explicit InteractiveAuthRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  InteractiveAuthRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const InteractiveAuthRequest& from);
  InteractiveAuthRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, InteractiveAuthRequest&& from) noexcept
      : InteractiveAuthRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInitFieldNumber = 1,
    kContinueFieldNumber = 2,
  };
  // .pam.InteractiveAuthInitRequest init = 1;
  bool has_init() const;
  private:
  bool _internal_has_init() const;

  public:
  void clear_init() ;
  const ::pam::InteractiveAuthInitRequest& init() const;
  [[nodiscard]] ::pam::InteractiveAuthInitRequest* PROTOBUF_NULLABLE release_init();
  ::pam::InteractiveAuthInitRequest* PROTOBUF_NONNULL mutable_init();
  void set_allocated_init(::pam::InteractiveAuthInitRequest* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_init(::pam::InteractiveAuthInitRequest* PROTOBUF_NULLABLE value);
  ::pam::InteractiveAuthInitRequest* PROTOBUF_NULLABLE unsafe_arena_release_init();

  private:
  const ::pam::InteractiveAuthInitRequest& _internal_init() const;
  ::pam::InteractiveAuthInitRequest* PROTOBUF_NONNULL _internal_mutable_init();

  public:
  // .pam.InteractiveAuthContinueRequest continue = 2;
  bool has_continue_() const;
  private:
  bool _internal_has_continue_() const;

  public:
  void clear_continue_() ;
  const ::pam::InteractiveAuthContinueRequest& continue_() const;
  [[nodiscard]] ::pam::InteractiveAuthContinueRequest* PROTOBUF_NULLABLE release_continue_();
  ::pam::InteractiveAuthContinueRequest* PROTOBUF_NONNULL mutable_continue_();
  void set_allocated_continue_(::pam::InteractiveAuthContinueRequest* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_continue_(::pam::InteractiveAuthContinueRequest* PROTOBUF_NULLABLE value);
  ::pam::InteractiveAuthContinueRequest* PROTOBUF_NULLABLE unsafe_arena_release_continue_();

  private:
  const ::pam::InteractiveAuthContinueRequest& _internal_continue_() const;
  ::pam::InteractiveAuthContinueRequest* PROTOBUF_NONNULL _internal_mutable_continue_();

  public:
  void clear_interactive_auth();
  InteractiveAuthCase interactive_auth_case() const;
  // @@protoc_insertion_point(class_scope:pam.InteractiveAuthRequest)
 private:
  class _Internal;
  void set_has_init();
  void set_has_continue_();
  inline bool has_interactive_auth() const;
  inline void clear_has_interactive_auth();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const InteractiveAuthRequest& from_msg);
    union InteractiveAuthUnion {
      constexpr InteractiveAuthUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::pam::InteractiveAuthInitRequest* PROTOBUF_NULLABLE init_;
      ::pam::InteractiveAuthContinueRequest* PROTOBUF_NULLABLE continue__;
    } interactive_auth_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pam_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull InteractiveAuthRequest_class_data_;
// -------------------------------------------------------------------

class TokenAuthResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:pam.TokenAuthResponse) */ {
 public:
  inline TokenAuthResponse() : TokenAuthResponse(nullptr) {}
  ~TokenAuthResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TokenAuthResponse* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TokenAuthResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TokenAuthResponse(::google::protobuf::internal::ConstantInitialized);

  inline TokenAuthResponse(const TokenAuthResponse& from) : TokenAuthResponse(nullptr, from) {}
  inline TokenAuthResponse(TokenAuthResponse&& from) noexcept
      : TokenAuthResponse(nullptr, ::std::move(from)) {}
  inline TokenAuthResponse& operator=(const TokenAuthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenAuthResponse& operator=(TokenAuthResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenAuthResponse& default_instance() {
    return *reinterpret_cast<const TokenAuthResponse*>(
        &_TokenAuthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(TokenAuthResponse& a, TokenAuthResponse& b) { a.Swap(&b); }
  inline void Swap(TokenAuthResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenAuthResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenAuthResponse* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TokenAuthResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TokenAuthResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TokenAuthResponse& from) { TokenAuthResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TokenAuthResponse* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "pam.TokenAuthResponse"; }

  explicit TokenAuthResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TokenAuthResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TokenAuthResponse& from);
  TokenAuthResponse(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TokenAuthResponse&& from) noexcept
      : TokenAuthResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTokenFieldNumber = 2,
    kSuccessfulFieldNumber = 1,
  };
  // .agent.Token token = 2;
  bool has_token() const;
  void clear_token() ;
  const ::agent::Token& token() const;
  [[nodiscard]] ::agent::Token* PROTOBUF_NULLABLE release_token();
  ::agent::Token* PROTOBUF_NONNULL mutable_token();
  void set_allocated_token(::agent::Token* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_token(::agent::Token* PROTOBUF_NULLABLE value);
  ::agent::Token* PROTOBUF_NULLABLE unsafe_arena_release_token();

  private:
  const ::agent::Token& _internal_token() const;
  ::agent::Token* PROTOBUF_NONNULL _internal_mutable_token();

  public:
  // bool successful = 1;
  void clear_successful() ;
  bool successful() const;
  void set_successful(bool value);

  private:
  bool _internal_successful() const;
  void _internal_set_successful(bool value);

  public:
  // @@protoc_insertion_point(class_scope:pam.TokenAuthResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TokenAuthResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::agent::Token* PROTOBUF_NULLABLE token_;
    bool successful_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pam_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull TokenAuthResponse_class_data_;
// -------------------------------------------------------------------

class PAMAuthorizationResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:pam.PAMAuthorizationResponse) */ {
 public:
  inline PAMAuthorizationResponse() : PAMAuthorizationResponse(nullptr) {}
  ~PAMAuthorizationResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PAMAuthorizationResponse* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PAMAuthorizationResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PAMAuthorizationResponse(::google::protobuf::internal::ConstantInitialized);

  inline PAMAuthorizationResponse(const PAMAuthorizationResponse& from) : PAMAuthorizationResponse(nullptr, from) {}
  inline PAMAuthorizationResponse(PAMAuthorizationResponse&& from) noexcept
      : PAMAuthorizationResponse(nullptr, ::std::move(from)) {}
  inline PAMAuthorizationResponse& operator=(const PAMAuthorizationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PAMAuthorizationResponse& operator=(PAMAuthorizationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PAMAuthorizationResponse& default_instance() {
    return *reinterpret_cast<const PAMAuthorizationResponse*>(
        &_PAMAuthorizationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(PAMAuthorizationResponse& a, PAMAuthorizationResponse& b) { a.Swap(&b); }
  inline void Swap(PAMAuthorizationResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PAMAuthorizationResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PAMAuthorizationResponse* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PAMAuthorizationResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PAMAuthorizationResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PAMAuthorizationResponse& from) { PAMAuthorizationResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PAMAuthorizationResponse* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "pam.PAMAuthorizationResponse"; }

  explicit PAMAuthorizationResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  PAMAuthorizationResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const PAMAuthorizationResponse& from);
  PAMAuthorizationResponse(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, PAMAuthorizationResponse&& from) noexcept
      : PAMAuthorizationResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResponseFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // .agent_auth.AuthorizeResponse response = 1;
  bool has_response() const;
  void clear_response() ;
  const ::agent_auth::AuthorizeResponse& response() const;
  [[nodiscard]] ::agent_auth::AuthorizeResponse* PROTOBUF_NULLABLE release_response();
  ::agent_auth::AuthorizeResponse* PROTOBUF_NONNULL mutable_response();
  void set_allocated_response(::agent_auth::AuthorizeResponse* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_response(::agent_auth::AuthorizeResponse* PROTOBUF_NULLABLE value);
  ::agent_auth::AuthorizeResponse* PROTOBUF_NULLABLE unsafe_arena_release_response();

  private:
  const ::agent_auth::AuthorizeResponse& _internal_response() const;
  ::agent_auth::AuthorizeResponse* PROTOBUF_NONNULL _internal_mutable_response();

  public:
  // .pam.InteractiveAuthResult code = 2;
  void clear_code() ;
  ::pam::InteractiveAuthResult code() const;
  void set_code(::pam::InteractiveAuthResult value);

  private:
  ::pam::InteractiveAuthResult _internal_code() const;
  void _internal_set_code(::pam::InteractiveAuthResult value);

  public:
  // @@protoc_insertion_point(class_scope:pam.PAMAuthorizationResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const PAMAuthorizationResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::agent_auth::AuthorizeResponse* PROTOBUF_NULLABLE response_;
    int code_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pam_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull PAMAuthorizationResponse_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TokenAuthRequest

// string username = 1;
inline void TokenAuthRequest::clear_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.ClearToEmpty();
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000001U);
}
inline const ::std::string& TokenAuthRequest::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pam.TokenAuthRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void TokenAuthRequest::set_username(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pam.TokenAuthRequest.username)
}
inline ::std::string* PROTOBUF_NONNULL TokenAuthRequest::mutable_username()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  ::std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:pam.TokenAuthRequest.username)
  return _s;
}
inline const ::std::string& TokenAuthRequest::_internal_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_.Get();
}
inline void TokenAuthRequest::_internal_set_username(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL TokenAuthRequest::_internal_mutable_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.username_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE TokenAuthRequest::release_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:pam.TokenAuthRequest.username)
  if (!CheckHasBit(_impl_._has_bits_[0], 0x00000001U)) {
    return nullptr;
  }
  ClearHasBit(_impl_._has_bits_[0], 0x00000001U);
  auto* released = _impl_.username_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.username_.Set("", GetArena());
  }
  return released;
}
inline void TokenAuthRequest::set_allocated_username(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000001U);
  }
  _impl_.username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:pam.TokenAuthRequest.username)
}

// string token = 2;
inline void TokenAuthRequest::clear_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.ClearToEmpty();
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000002U);
}
inline const ::std::string& TokenAuthRequest::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pam.TokenAuthRequest.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void TokenAuthRequest::set_token(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pam.TokenAuthRequest.token)
}
inline ::std::string* PROTOBUF_NONNULL TokenAuthRequest::mutable_token()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  ::std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:pam.TokenAuthRequest.token)
  return _s;
}
inline const ::std::string& TokenAuthRequest::_internal_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_.Get();
}
inline void TokenAuthRequest::_internal_set_token(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL TokenAuthRequest::_internal_mutable_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.token_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE TokenAuthRequest::release_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:pam.TokenAuthRequest.token)
  if (!CheckHasBit(_impl_._has_bits_[0], 0x00000002U)) {
    return nullptr;
  }
  ClearHasBit(_impl_._has_bits_[0], 0x00000002U);
  auto* released = _impl_.token_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.token_.Set("", GetArena());
  }
  return released;
}
inline void TokenAuthRequest::set_allocated_token(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000002U);
  }
  _impl_.token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:pam.TokenAuthRequest.token)
}

// -------------------------------------------------------------------

// TokenAuthResponse

// bool successful = 1;
inline void TokenAuthResponse::clear_successful() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.successful_ = false;
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000002U);
}
inline bool TokenAuthResponse::successful() const {
  // @@protoc_insertion_point(field_get:pam.TokenAuthResponse.successful)
  return _internal_successful();
}
inline void TokenAuthResponse::set_successful(bool value) {
  _internal_set_successful(value);
  SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  // @@protoc_insertion_point(field_set:pam.TokenAuthResponse.successful)
}
inline bool TokenAuthResponse::_internal_successful() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.successful_;
}
inline void TokenAuthResponse::_internal_set_successful(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.successful_ = value;
}

// .agent.Token token = 2;
inline bool TokenAuthResponse::has_token() const {
  bool value = CheckHasBit(_impl_._has_bits_[0], 0x00000001U);
  PROTOBUF_ASSUME(!value || _impl_.token_ != nullptr);
  return value;
}
inline const ::agent::Token& TokenAuthResponse::_internal_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::agent::Token* p = _impl_.token_;
  return p != nullptr ? *p : reinterpret_cast<const ::agent::Token&>(::agent::_Token_default_instance_);
}
inline const ::agent::Token& TokenAuthResponse::token() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pam.TokenAuthResponse.token)
  return _internal_token();
}
inline void TokenAuthResponse::unsafe_arena_set_allocated_token(
    ::agent::Token* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.token_);
  }
  _impl_.token_ = reinterpret_cast<::agent::Token*>(value);
  if (value != nullptr) {
    SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000001U);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pam.TokenAuthResponse.token)
}
inline ::agent::Token* PROTOBUF_NULLABLE TokenAuthResponse::release_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  ClearHasBit(_impl_._has_bits_[0], 0x00000001U);
  ::agent::Token* released = _impl_.token_;
  _impl_.token_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::agent::Token* PROTOBUF_NULLABLE TokenAuthResponse::unsafe_arena_release_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:pam.TokenAuthResponse.token)

  ClearHasBit(_impl_._has_bits_[0], 0x00000001U);
  ::agent::Token* temp = _impl_.token_;
  _impl_.token_ = nullptr;
  return temp;
}
inline ::agent::Token* PROTOBUF_NONNULL TokenAuthResponse::_internal_mutable_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.token_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::agent::Token>(GetArena());
    _impl_.token_ = reinterpret_cast<::agent::Token*>(p);
  }
  return _impl_.token_;
}
inline ::agent::Token* PROTOBUF_NONNULL TokenAuthResponse::mutable_token()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  ::agent::Token* _msg = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:pam.TokenAuthResponse.token)
  return _msg;
}
inline void TokenAuthResponse::set_allocated_token(::agent::Token* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.token_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000001U);
  }

  _impl_.token_ = reinterpret_cast<::agent::Token*>(value);
  // @@protoc_insertion_point(field_set_allocated:pam.TokenAuthResponse.token)
}

// -------------------------------------------------------------------

// InteractiveAuthInitRequest

// string username = 1;
inline void InteractiveAuthInitRequest::clear_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.ClearToEmpty();
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000001U);
}
inline const ::std::string& InteractiveAuthInitRequest::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pam.InteractiveAuthInitRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void InteractiveAuthInitRequest::set_username(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pam.InteractiveAuthInitRequest.username)
}
inline ::std::string* PROTOBUF_NONNULL InteractiveAuthInitRequest::mutable_username()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  ::std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:pam.InteractiveAuthInitRequest.username)
  return _s;
}
inline const ::std::string& InteractiveAuthInitRequest::_internal_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_.Get();
}
inline void InteractiveAuthInitRequest::_internal_set_username(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL InteractiveAuthInitRequest::_internal_mutable_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.username_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE InteractiveAuthInitRequest::release_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:pam.InteractiveAuthInitRequest.username)
  if (!CheckHasBit(_impl_._has_bits_[0], 0x00000001U)) {
    return nullptr;
  }
  ClearHasBit(_impl_._has_bits_[0], 0x00000001U);
  auto* released = _impl_.username_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.username_.Set("", GetArena());
  }
  return released;
}
inline void InteractiveAuthInitRequest::set_allocated_username(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000001U);
  }
  _impl_.username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:pam.InteractiveAuthInitRequest.username)
}

// string password = 2;
inline void InteractiveAuthInitRequest::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.ClearToEmpty();
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000002U);
}
inline const ::std::string& InteractiveAuthInitRequest::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pam.InteractiveAuthInitRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void InteractiveAuthInitRequest::set_password(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pam.InteractiveAuthInitRequest.password)
}
inline ::std::string* PROTOBUF_NONNULL InteractiveAuthInitRequest::mutable_password()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  ::std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:pam.InteractiveAuthInitRequest.password)
  return _s;
}
inline const ::std::string& InteractiveAuthInitRequest::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_.Get();
}
inline void InteractiveAuthInitRequest::_internal_set_password(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL InteractiveAuthInitRequest::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.password_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE InteractiveAuthInitRequest::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:pam.InteractiveAuthInitRequest.password)
  if (!CheckHasBit(_impl_._has_bits_[0], 0x00000002U)) {
    return nullptr;
  }
  ClearHasBit(_impl_._has_bits_[0], 0x00000002U);
  auto* released = _impl_.password_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.password_.Set("", GetArena());
  }
  return released;
}
inline void InteractiveAuthInitRequest::set_allocated_password(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000002U);
  }
  _impl_.password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:pam.InteractiveAuthInitRequest.password)
}

// -------------------------------------------------------------------

// InteractiveAuthContinueRequest

// string txid = 1;
inline void InteractiveAuthContinueRequest::clear_txid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.txid_.ClearToEmpty();
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000001U);
}
inline const ::std::string& InteractiveAuthContinueRequest::txid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pam.InteractiveAuthContinueRequest.txid)
  return _internal_txid();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void InteractiveAuthContinueRequest::set_txid(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  _impl_.txid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pam.InteractiveAuthContinueRequest.txid)
}
inline ::std::string* PROTOBUF_NONNULL InteractiveAuthContinueRequest::mutable_txid()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  ::std::string* _s = _internal_mutable_txid();
  // @@protoc_insertion_point(field_mutable:pam.InteractiveAuthContinueRequest.txid)
  return _s;
}
inline const ::std::string& InteractiveAuthContinueRequest::_internal_txid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.txid_.Get();
}
inline void InteractiveAuthContinueRequest::_internal_set_txid(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.txid_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL InteractiveAuthContinueRequest::_internal_mutable_txid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.txid_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE InteractiveAuthContinueRequest::release_txid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:pam.InteractiveAuthContinueRequest.txid)
  if (!CheckHasBit(_impl_._has_bits_[0], 0x00000001U)) {
    return nullptr;
  }
  ClearHasBit(_impl_._has_bits_[0], 0x00000001U);
  auto* released = _impl_.txid_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.txid_.Set("", GetArena());
  }
  return released;
}
inline void InteractiveAuthContinueRequest::set_allocated_txid(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000001U);
  }
  _impl_.txid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.txid_.IsDefault()) {
    _impl_.txid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:pam.InteractiveAuthContinueRequest.txid)
}

// string value = 2;
inline void InteractiveAuthContinueRequest::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000002U);
}
inline const ::std::string& InteractiveAuthContinueRequest::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pam.InteractiveAuthContinueRequest.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void InteractiveAuthContinueRequest::set_value(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pam.InteractiveAuthContinueRequest.value)
}
inline ::std::string* PROTOBUF_NONNULL InteractiveAuthContinueRequest::mutable_value()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  ::std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:pam.InteractiveAuthContinueRequest.value)
  return _s;
}
inline const ::std::string& InteractiveAuthContinueRequest::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void InteractiveAuthContinueRequest::_internal_set_value(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL InteractiveAuthContinueRequest::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.value_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE InteractiveAuthContinueRequest::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:pam.InteractiveAuthContinueRequest.value)
  if (!CheckHasBit(_impl_._has_bits_[0], 0x00000002U)) {
    return nullptr;
  }
  ClearHasBit(_impl_._has_bits_[0], 0x00000002U);
  auto* released = _impl_.value_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.value_.Set("", GetArena());
  }
  return released;
}
inline void InteractiveAuthContinueRequest::set_allocated_value(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000002U);
  }
  _impl_.value_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:pam.InteractiveAuthContinueRequest.value)
}

// -------------------------------------------------------------------

// InteractiveAuthRequest

// .pam.InteractiveAuthInitRequest init = 1;
inline bool InteractiveAuthRequest::has_init() const {
  return interactive_auth_case() == kInit;
}
inline bool InteractiveAuthRequest::_internal_has_init() const {
  return interactive_auth_case() == kInit;
}
inline void InteractiveAuthRequest::set_has_init() {
  _impl_._oneof_case_[0] = kInit;
}
inline void InteractiveAuthRequest::clear_init() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (interactive_auth_case() == kInit) {
    if (GetArena() == nullptr) {
      delete _impl_.interactive_auth_.init_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.interactive_auth_.init_);
    }
    clear_has_interactive_auth();
  }
}
inline ::pam::InteractiveAuthInitRequest* PROTOBUF_NULLABLE InteractiveAuthRequest::release_init() {
  // @@protoc_insertion_point(field_release:pam.InteractiveAuthRequest.init)
  if (interactive_auth_case() == kInit) {
    clear_has_interactive_auth();
    auto* temp = _impl_.interactive_auth_.init_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.interactive_auth_.init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pam::InteractiveAuthInitRequest& InteractiveAuthRequest::_internal_init() const {
  return interactive_auth_case() == kInit ? static_cast<const ::pam::InteractiveAuthInitRequest&>(*_impl_.interactive_auth_.init_)
                     : reinterpret_cast<const ::pam::InteractiveAuthInitRequest&>(::pam::_InteractiveAuthInitRequest_default_instance_);
}
inline const ::pam::InteractiveAuthInitRequest& InteractiveAuthRequest::init() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pam.InteractiveAuthRequest.init)
  return _internal_init();
}
inline ::pam::InteractiveAuthInitRequest* PROTOBUF_NULLABLE InteractiveAuthRequest::unsafe_arena_release_init() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pam.InteractiveAuthRequest.init)
  if (interactive_auth_case() == kInit) {
    clear_has_interactive_auth();
    auto* temp = _impl_.interactive_auth_.init_;
    _impl_.interactive_auth_.init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InteractiveAuthRequest::unsafe_arena_set_allocated_init(
    ::pam::InteractiveAuthInitRequest* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_interactive_auth();
  if (value) {
    set_has_init();
    _impl_.interactive_auth_.init_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pam.InteractiveAuthRequest.init)
}
inline ::pam::InteractiveAuthInitRequest* PROTOBUF_NONNULL InteractiveAuthRequest::_internal_mutable_init() {
  if (interactive_auth_case() != kInit) {
    clear_interactive_auth();
    set_has_init();
    _impl_.interactive_auth_.init_ = 
        ::google::protobuf::Message::DefaultConstruct<::pam::InteractiveAuthInitRequest>(GetArena());
  }
  return _impl_.interactive_auth_.init_;
}
inline ::pam::InteractiveAuthInitRequest* PROTOBUF_NONNULL InteractiveAuthRequest::mutable_init()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::pam::InteractiveAuthInitRequest* _msg = _internal_mutable_init();
  // @@protoc_insertion_point(field_mutable:pam.InteractiveAuthRequest.init)
  return _msg;
}

// .pam.InteractiveAuthContinueRequest continue = 2;
inline bool InteractiveAuthRequest::has_continue_() const {
  return interactive_auth_case() == kContinue;
}
inline bool InteractiveAuthRequest::_internal_has_continue_() const {
  return interactive_auth_case() == kContinue;
}
inline void InteractiveAuthRequest::set_has_continue_() {
  _impl_._oneof_case_[0] = kContinue;
}
inline void InteractiveAuthRequest::clear_continue_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (interactive_auth_case() == kContinue) {
    if (GetArena() == nullptr) {
      delete _impl_.interactive_auth_.continue__;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.interactive_auth_.continue__);
    }
    clear_has_interactive_auth();
  }
}
inline ::pam::InteractiveAuthContinueRequest* PROTOBUF_NULLABLE InteractiveAuthRequest::release_continue_() {
  // @@protoc_insertion_point(field_release:pam.InteractiveAuthRequest.continue)
  if (interactive_auth_case() == kContinue) {
    clear_has_interactive_auth();
    auto* temp = _impl_.interactive_auth_.continue__;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.interactive_auth_.continue__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pam::InteractiveAuthContinueRequest& InteractiveAuthRequest::_internal_continue_() const {
  return interactive_auth_case() == kContinue ? static_cast<const ::pam::InteractiveAuthContinueRequest&>(*_impl_.interactive_auth_.continue__)
                     : reinterpret_cast<const ::pam::InteractiveAuthContinueRequest&>(::pam::_InteractiveAuthContinueRequest_default_instance_);
}
inline const ::pam::InteractiveAuthContinueRequest& InteractiveAuthRequest::continue_() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pam.InteractiveAuthRequest.continue)
  return _internal_continue_();
}
inline ::pam::InteractiveAuthContinueRequest* PROTOBUF_NULLABLE InteractiveAuthRequest::unsafe_arena_release_continue_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pam.InteractiveAuthRequest.continue)
  if (interactive_auth_case() == kContinue) {
    clear_has_interactive_auth();
    auto* temp = _impl_.interactive_auth_.continue__;
    _impl_.interactive_auth_.continue__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InteractiveAuthRequest::unsafe_arena_set_allocated_continue_(
    ::pam::InteractiveAuthContinueRequest* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_interactive_auth();
  if (value) {
    set_has_continue_();
    _impl_.interactive_auth_.continue__ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pam.InteractiveAuthRequest.continue)
}
inline ::pam::InteractiveAuthContinueRequest* PROTOBUF_NONNULL InteractiveAuthRequest::_internal_mutable_continue_() {
  if (interactive_auth_case() != kContinue) {
    clear_interactive_auth();
    set_has_continue_();
    _impl_.interactive_auth_.continue__ = 
        ::google::protobuf::Message::DefaultConstruct<::pam::InteractiveAuthContinueRequest>(GetArena());
  }
  return _impl_.interactive_auth_.continue__;
}
inline ::pam::InteractiveAuthContinueRequest* PROTOBUF_NONNULL InteractiveAuthRequest::mutable_continue_()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::pam::InteractiveAuthContinueRequest* _msg = _internal_mutable_continue_();
  // @@protoc_insertion_point(field_mutable:pam.InteractiveAuthRequest.continue)
  return _msg;
}

inline bool InteractiveAuthRequest::has_interactive_auth() const {
  return interactive_auth_case() != INTERACTIVE_AUTH_NOT_SET;
}
inline void InteractiveAuthRequest::clear_has_interactive_auth() {
  _impl_._oneof_case_[0] = INTERACTIVE_AUTH_NOT_SET;
}
inline InteractiveAuthRequest::InteractiveAuthCase InteractiveAuthRequest::interactive_auth_case() const {
  return InteractiveAuthRequest::InteractiveAuthCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// InteractiveChallenge

// string txid = 1;
inline void InteractiveChallenge::clear_txid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.txid_.ClearToEmpty();
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000001U);
}
inline const ::std::string& InteractiveChallenge::txid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pam.InteractiveChallenge.txid)
  return _internal_txid();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void InteractiveChallenge::set_txid(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  _impl_.txid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pam.InteractiveChallenge.txid)
}
inline ::std::string* PROTOBUF_NONNULL InteractiveChallenge::mutable_txid()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  ::std::string* _s = _internal_mutable_txid();
  // @@protoc_insertion_point(field_mutable:pam.InteractiveChallenge.txid)
  return _s;
}
inline const ::std::string& InteractiveChallenge::_internal_txid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.txid_.Get();
}
inline void InteractiveChallenge::_internal_set_txid(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.txid_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL InteractiveChallenge::_internal_mutable_txid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.txid_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE InteractiveChallenge::release_txid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:pam.InteractiveChallenge.txid)
  if (!CheckHasBit(_impl_._has_bits_[0], 0x00000001U)) {
    return nullptr;
  }
  ClearHasBit(_impl_._has_bits_[0], 0x00000001U);
  auto* released = _impl_.txid_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.txid_.Set("", GetArena());
  }
  return released;
}
inline void InteractiveChallenge::set_allocated_txid(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000001U);
  }
  _impl_.txid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.txid_.IsDefault()) {
    _impl_.txid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:pam.InteractiveChallenge.txid)
}

// bool finished = 2;
inline void InteractiveChallenge::clear_finished() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.finished_ = false;
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000008U);
}
inline bool InteractiveChallenge::finished() const {
  // @@protoc_insertion_point(field_get:pam.InteractiveChallenge.finished)
  return _internal_finished();
}
inline void InteractiveChallenge::set_finished(bool value) {
  _internal_set_finished(value);
  SetHasBit(_impl_._has_bits_[0], 0x00000008U);
  // @@protoc_insertion_point(field_set:pam.InteractiveChallenge.finished)
}
inline bool InteractiveChallenge::_internal_finished() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.finished_;
}
inline void InteractiveChallenge::_internal_set_finished(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.finished_ = value;
}

// .pam.InteractiveAuthResult result = 3;
inline void InteractiveChallenge::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = 0;
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000010U);
}
inline ::pam::InteractiveAuthResult InteractiveChallenge::result() const {
  // @@protoc_insertion_point(field_get:pam.InteractiveChallenge.result)
  return _internal_result();
}
inline void InteractiveChallenge::set_result(::pam::InteractiveAuthResult value) {
  _internal_set_result(value);
  SetHasBit(_impl_._has_bits_[0], 0x00000010U);
  // @@protoc_insertion_point(field_set:pam.InteractiveChallenge.result)
}
inline ::pam::InteractiveAuthResult InteractiveChallenge::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::pam::InteractiveAuthResult>(_impl_.result_);
}
inline void InteractiveChallenge::_internal_set_result(::pam::InteractiveAuthResult value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = value;
}

// string prompt = 4;
inline void InteractiveChallenge::clear_prompt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prompt_.ClearToEmpty();
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000002U);
}
inline const ::std::string& InteractiveChallenge::prompt() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pam.InteractiveChallenge.prompt)
  return _internal_prompt();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void InteractiveChallenge::set_prompt(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  _impl_.prompt_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pam.InteractiveChallenge.prompt)
}
inline ::std::string* PROTOBUF_NONNULL InteractiveChallenge::mutable_prompt()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  ::std::string* _s = _internal_mutable_prompt();
  // @@protoc_insertion_point(field_mutable:pam.InteractiveChallenge.prompt)
  return _s;
}
inline const ::std::string& InteractiveChallenge::_internal_prompt() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.prompt_.Get();
}
inline void InteractiveChallenge::_internal_set_prompt(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prompt_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL InteractiveChallenge::_internal_mutable_prompt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.prompt_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE InteractiveChallenge::release_prompt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:pam.InteractiveChallenge.prompt)
  if (!CheckHasBit(_impl_._has_bits_[0], 0x00000002U)) {
    return nullptr;
  }
  ClearHasBit(_impl_._has_bits_[0], 0x00000002U);
  auto* released = _impl_.prompt_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.prompt_.Set("", GetArena());
  }
  return released;
}
inline void InteractiveChallenge::set_allocated_prompt(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000002U);
  }
  _impl_.prompt_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.prompt_.IsDefault()) {
    _impl_.prompt_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:pam.InteractiveChallenge.prompt)
}

// .pam.InteractiveChallenge.PromptMeta prompt_meta = 5;
inline void InteractiveChallenge::clear_prompt_meta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prompt_meta_ = 0;
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000020U);
}
inline ::pam::InteractiveChallenge_PromptMeta InteractiveChallenge::prompt_meta() const {
  // @@protoc_insertion_point(field_get:pam.InteractiveChallenge.prompt_meta)
  return _internal_prompt_meta();
}
inline void InteractiveChallenge::set_prompt_meta(::pam::InteractiveChallenge_PromptMeta value) {
  _internal_set_prompt_meta(value);
  SetHasBit(_impl_._has_bits_[0], 0x00000020U);
  // @@protoc_insertion_point(field_set:pam.InteractiveChallenge.prompt_meta)
}
inline ::pam::InteractiveChallenge_PromptMeta InteractiveChallenge::_internal_prompt_meta() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::pam::InteractiveChallenge_PromptMeta>(_impl_.prompt_meta_);
}
inline void InteractiveChallenge::_internal_set_prompt_meta(::pam::InteractiveChallenge_PromptMeta value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prompt_meta_ = value;
}

// string debug_info = 6;
inline void InteractiveChallenge::clear_debug_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.debug_info_.ClearToEmpty();
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000004U);
}
inline const ::std::string& InteractiveChallenge::debug_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pam.InteractiveChallenge.debug_info)
  return _internal_debug_info();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void InteractiveChallenge::set_debug_info(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  SetHasBit(_impl_._has_bits_[0], 0x00000004U);
  _impl_.debug_info_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pam.InteractiveChallenge.debug_info)
}
inline ::std::string* PROTOBUF_NONNULL InteractiveChallenge::mutable_debug_info()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  SetHasBit(_impl_._has_bits_[0], 0x00000004U);
  ::std::string* _s = _internal_mutable_debug_info();
  // @@protoc_insertion_point(field_mutable:pam.InteractiveChallenge.debug_info)
  return _s;
}
inline const ::std::string& InteractiveChallenge::_internal_debug_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.debug_info_.Get();
}
inline void InteractiveChallenge::_internal_set_debug_info(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.debug_info_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL InteractiveChallenge::_internal_mutable_debug_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.debug_info_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE InteractiveChallenge::release_debug_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:pam.InteractiveChallenge.debug_info)
  if (!CheckHasBit(_impl_._has_bits_[0], 0x00000004U)) {
    return nullptr;
  }
  ClearHasBit(_impl_._has_bits_[0], 0x00000004U);
  auto* released = _impl_.debug_info_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.debug_info_.Set("", GetArena());
  }
  return released;
}
inline void InteractiveChallenge::set_allocated_debug_info(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    SetHasBit(_impl_._has_bits_[0], 0x00000004U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000004U);
  }
  _impl_.debug_info_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.debug_info_.IsDefault()) {
    _impl_.debug_info_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:pam.InteractiveChallenge.debug_info)
}

// -------------------------------------------------------------------

// PAMAuthorizationResponse

// .agent_auth.AuthorizeResponse response = 1;
inline bool PAMAuthorizationResponse::has_response() const {
  bool value = CheckHasBit(_impl_._has_bits_[0], 0x00000001U);
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::agent_auth::AuthorizeResponse& PAMAuthorizationResponse::_internal_response() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::agent_auth::AuthorizeResponse* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::agent_auth::AuthorizeResponse&>(::agent_auth::_AuthorizeResponse_default_instance_);
}
inline const ::agent_auth::AuthorizeResponse& PAMAuthorizationResponse::response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pam.PAMAuthorizationResponse.response)
  return _internal_response();
}
inline void PAMAuthorizationResponse::unsafe_arena_set_allocated_response(
    ::agent_auth::AuthorizeResponse* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::agent_auth::AuthorizeResponse*>(value);
  if (value != nullptr) {
    SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000001U);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pam.PAMAuthorizationResponse.response)
}
inline ::agent_auth::AuthorizeResponse* PROTOBUF_NULLABLE PAMAuthorizationResponse::release_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  ClearHasBit(_impl_._has_bits_[0], 0x00000001U);
  ::agent_auth::AuthorizeResponse* released = _impl_.response_;
  _impl_.response_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::agent_auth::AuthorizeResponse* PROTOBUF_NULLABLE PAMAuthorizationResponse::unsafe_arena_release_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:pam.PAMAuthorizationResponse.response)

  ClearHasBit(_impl_._has_bits_[0], 0x00000001U);
  ::agent_auth::AuthorizeResponse* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::agent_auth::AuthorizeResponse* PROTOBUF_NONNULL PAMAuthorizationResponse::_internal_mutable_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.response_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::agent_auth::AuthorizeResponse>(GetArena());
    _impl_.response_ = reinterpret_cast<::agent_auth::AuthorizeResponse*>(p);
  }
  return _impl_.response_;
}
inline ::agent_auth::AuthorizeResponse* PROTOBUF_NONNULL PAMAuthorizationResponse::mutable_response()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  ::agent_auth::AuthorizeResponse* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:pam.PAMAuthorizationResponse.response)
  return _msg;
}
inline void PAMAuthorizationResponse::set_allocated_response(::agent_auth::AuthorizeResponse* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    SetHasBit(_impl_._has_bits_[0], 0x00000001U);
  } else {
    ClearHasBit(_impl_._has_bits_[0], 0x00000001U);
  }

  _impl_.response_ = reinterpret_cast<::agent_auth::AuthorizeResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:pam.PAMAuthorizationResponse.response)
}

// .pam.InteractiveAuthResult code = 2;
inline void PAMAuthorizationResponse::clear_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = 0;
  ClearHasBit(_impl_._has_bits_[0],
                  0x00000002U);
}
inline ::pam::InteractiveAuthResult PAMAuthorizationResponse::code() const {
  // @@protoc_insertion_point(field_get:pam.PAMAuthorizationResponse.code)
  return _internal_code();
}
inline void PAMAuthorizationResponse::set_code(::pam::InteractiveAuthResult value) {
  _internal_set_code(value);
  SetHasBit(_impl_._has_bits_[0], 0x00000002U);
  // @@protoc_insertion_point(field_set:pam.PAMAuthorizationResponse.code)
}
inline ::pam::InteractiveAuthResult PAMAuthorizationResponse::_internal_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::pam::InteractiveAuthResult>(_impl_.code_);
}
inline void PAMAuthorizationResponse::_internal_set_code(::pam::InteractiveAuthResult value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace pam


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::pam::InteractiveChallenge_PromptMeta> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::pam::InteractiveChallenge_PromptMeta>() {
  return ::pam::InteractiveChallenge_PromptMeta_descriptor();
}
template <>
struct is_proto_enum<::pam::InteractiveAuthResult> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::pam::InteractiveAuthResult>() {
  return ::pam::InteractiveAuthResult_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // pam_2eproto_2epb_2eh
