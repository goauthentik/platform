// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pam_session.proto

#include "pam_session.pb.h"
#include "pam_session.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace pam_session {

static const char* SessionManager_method_names[] = {
  "/pam_session.SessionManager/RegisterSession",
  "/pam_session.SessionManager/SessionStatus",
  "/pam_session.SessionManager/CloseSession",
};

std::unique_ptr< SessionManager::Stub> SessionManager::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SessionManager::Stub> stub(new SessionManager::Stub(channel, options));
  return stub;
}

SessionManager::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RegisterSession_(SessionManager_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SessionStatus_(SessionManager_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CloseSession_(SessionManager_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SessionManager::Stub::RegisterSession(::grpc::ClientContext* context, const ::pam_session::RegisterSessionRequest& request, ::pam_session::RegisterSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pam_session::RegisterSessionRequest, ::pam_session::RegisterSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterSession_, context, request, response);
}

void SessionManager::Stub::async::RegisterSession(::grpc::ClientContext* context, const ::pam_session::RegisterSessionRequest* request, ::pam_session::RegisterSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pam_session::RegisterSessionRequest, ::pam_session::RegisterSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterSession_, context, request, response, std::move(f));
}

void SessionManager::Stub::async::RegisterSession(::grpc::ClientContext* context, const ::pam_session::RegisterSessionRequest* request, ::pam_session::RegisterSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pam_session::RegisterSessionResponse>* SessionManager::Stub::PrepareAsyncRegisterSessionRaw(::grpc::ClientContext* context, const ::pam_session::RegisterSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pam_session::RegisterSessionResponse, ::pam_session::RegisterSessionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pam_session::RegisterSessionResponse>* SessionManager::Stub::AsyncRegisterSessionRaw(::grpc::ClientContext* context, const ::pam_session::RegisterSessionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SessionManager::Stub::SessionStatus(::grpc::ClientContext* context, const ::pam_session::SessionStatusRequest& request, ::pam_session::SessionStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pam_session::SessionStatusRequest, ::pam_session::SessionStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SessionStatus_, context, request, response);
}

void SessionManager::Stub::async::SessionStatus(::grpc::ClientContext* context, const ::pam_session::SessionStatusRequest* request, ::pam_session::SessionStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pam_session::SessionStatusRequest, ::pam_session::SessionStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SessionStatus_, context, request, response, std::move(f));
}

void SessionManager::Stub::async::SessionStatus(::grpc::ClientContext* context, const ::pam_session::SessionStatusRequest* request, ::pam_session::SessionStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SessionStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pam_session::SessionStatusResponse>* SessionManager::Stub::PrepareAsyncSessionStatusRaw(::grpc::ClientContext* context, const ::pam_session::SessionStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pam_session::SessionStatusResponse, ::pam_session::SessionStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SessionStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pam_session::SessionStatusResponse>* SessionManager::Stub::AsyncSessionStatusRaw(::grpc::ClientContext* context, const ::pam_session::SessionStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSessionStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SessionManager::Stub::CloseSession(::grpc::ClientContext* context, const ::pam_session::CloseSessionRequest& request, ::pam_session::CloseSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pam_session::CloseSessionRequest, ::pam_session::CloseSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CloseSession_, context, request, response);
}

void SessionManager::Stub::async::CloseSession(::grpc::ClientContext* context, const ::pam_session::CloseSessionRequest* request, ::pam_session::CloseSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pam_session::CloseSessionRequest, ::pam_session::CloseSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CloseSession_, context, request, response, std::move(f));
}

void SessionManager::Stub::async::CloseSession(::grpc::ClientContext* context, const ::pam_session::CloseSessionRequest* request, ::pam_session::CloseSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CloseSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pam_session::CloseSessionResponse>* SessionManager::Stub::PrepareAsyncCloseSessionRaw(::grpc::ClientContext* context, const ::pam_session::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pam_session::CloseSessionResponse, ::pam_session::CloseSessionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CloseSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pam_session::CloseSessionResponse>* SessionManager::Stub::AsyncCloseSessionRaw(::grpc::ClientContext* context, const ::pam_session::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCloseSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

SessionManager::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SessionManager_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SessionManager::Service, ::pam_session::RegisterSessionRequest, ::pam_session::RegisterSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SessionManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pam_session::RegisterSessionRequest* req,
             ::pam_session::RegisterSessionResponse* resp) {
               return service->RegisterSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SessionManager_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SessionManager::Service, ::pam_session::SessionStatusRequest, ::pam_session::SessionStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SessionManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pam_session::SessionStatusRequest* req,
             ::pam_session::SessionStatusResponse* resp) {
               return service->SessionStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SessionManager_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SessionManager::Service, ::pam_session::CloseSessionRequest, ::pam_session::CloseSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SessionManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pam_session::CloseSessionRequest* req,
             ::pam_session::CloseSessionResponse* resp) {
               return service->CloseSession(ctx, req, resp);
             }, this)));
}

SessionManager::Service::~Service() {
}

::grpc::Status SessionManager::Service::RegisterSession(::grpc::ServerContext* context, const ::pam_session::RegisterSessionRequest* request, ::pam_session::RegisterSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SessionManager::Service::SessionStatus(::grpc::ServerContext* context, const ::pam_session::SessionStatusRequest* request, ::pam_session::SessionStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SessionManager::Service::CloseSession(::grpc::ServerContext* context, const ::pam_session::CloseSessionRequest* request, ::pam_session::CloseSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pam_session
#include <grpcpp/ports_undef.inc>

