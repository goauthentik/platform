// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nss.proto

#include "nss.pb.h"
#include "nss.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace nss {

static const char* NSS_method_names[] = {
  "/nss.NSS/ListUsers",
  "/nss.NSS/GetUser",
  "/nss.NSS/ListGroups",
  "/nss.NSS/GetGroup",
};

std::unique_ptr< NSS::Stub> NSS::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NSS::Stub> stub(new NSS::Stub(channel, options));
  return stub;
}

NSS::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ListUsers_(NSS_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUser_(NSS_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListGroups_(NSS_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGroup_(NSS_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NSS::Stub::ListUsers(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::nss::Users* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::nss::Users, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListUsers_, context, request, response);
}

void NSS::Stub::async::ListUsers(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::nss::Users* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::nss::Users, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListUsers_, context, request, response, std::move(f));
}

void NSS::Stub::async::ListUsers(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::nss::Users* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListUsers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::nss::Users>* NSS::Stub::PrepareAsyncListUsersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::nss::Users, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListUsers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::nss::Users>* NSS::Stub::AsyncListUsersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListUsersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NSS::Stub::GetUser(::grpc::ClientContext* context, const ::nss::GetRequest& request, ::nss::User* response) {
  return ::grpc::internal::BlockingUnaryCall< ::nss::GetRequest, ::nss::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUser_, context, request, response);
}

void NSS::Stub::async::GetUser(::grpc::ClientContext* context, const ::nss::GetRequest* request, ::nss::User* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::nss::GetRequest, ::nss::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUser_, context, request, response, std::move(f));
}

void NSS::Stub::async::GetUser(::grpc::ClientContext* context, const ::nss::GetRequest* request, ::nss::User* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::nss::User>* NSS::Stub::PrepareAsyncGetUserRaw(::grpc::ClientContext* context, const ::nss::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::nss::User, ::nss::GetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::nss::User>* NSS::Stub::AsyncGetUserRaw(::grpc::ClientContext* context, const ::nss::GetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NSS::Stub::ListGroups(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::nss::Groups* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::nss::Groups, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListGroups_, context, request, response);
}

void NSS::Stub::async::ListGroups(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::nss::Groups* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::nss::Groups, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListGroups_, context, request, response, std::move(f));
}

void NSS::Stub::async::ListGroups(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::nss::Groups* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListGroups_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::nss::Groups>* NSS::Stub::PrepareAsyncListGroupsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::nss::Groups, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListGroups_, context, request);
}

::grpc::ClientAsyncResponseReader< ::nss::Groups>* NSS::Stub::AsyncListGroupsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListGroupsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NSS::Stub::GetGroup(::grpc::ClientContext* context, const ::nss::GetRequest& request, ::nss::Group* response) {
  return ::grpc::internal::BlockingUnaryCall< ::nss::GetRequest, ::nss::Group, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetGroup_, context, request, response);
}

void NSS::Stub::async::GetGroup(::grpc::ClientContext* context, const ::nss::GetRequest* request, ::nss::Group* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::nss::GetRequest, ::nss::Group, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGroup_, context, request, response, std::move(f));
}

void NSS::Stub::async::GetGroup(::grpc::ClientContext* context, const ::nss::GetRequest* request, ::nss::Group* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::nss::Group>* NSS::Stub::PrepareAsyncGetGroupRaw(::grpc::ClientContext* context, const ::nss::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::nss::Group, ::nss::GetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetGroup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::nss::Group>* NSS::Stub::AsyncGetGroupRaw(::grpc::ClientContext* context, const ::nss::GetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

NSS::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NSS_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NSS::Service, ::google::protobuf::Empty, ::nss::Users, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NSS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::nss::Users* resp) {
               return service->ListUsers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NSS_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NSS::Service, ::nss::GetRequest, ::nss::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NSS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::nss::GetRequest* req,
             ::nss::User* resp) {
               return service->GetUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NSS_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NSS::Service, ::google::protobuf::Empty, ::nss::Groups, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NSS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::nss::Groups* resp) {
               return service->ListGroups(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NSS_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NSS::Service, ::nss::GetRequest, ::nss::Group, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NSS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::nss::GetRequest* req,
             ::nss::Group* resp) {
               return service->GetGroup(ctx, req, resp);
             }, this)));
}

NSS::Service::~Service() {
}

::grpc::Status NSS::Service::ListUsers(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::nss::Users* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NSS::Service::GetUser(::grpc::ServerContext* context, const ::nss::GetRequest* request, ::nss::User* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NSS::Service::ListGroups(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::nss::Groups* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NSS::Service::GetGroup(::grpc::ServerContext* context, const ::nss::GetRequest* request, ::nss::Group* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace nss
#include <grpcpp/ports_undef.inc>

