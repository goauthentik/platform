// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: agent_platform.proto

#include "agent_platform.pb.h"
#include "agent_platform.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace agent_platform {

static const char* AgentPlatform_method_names[] = {
  "/agent_platform.AgentPlatform/SignedEndpointHeader",
};

std::unique_ptr< AgentPlatform::Stub> AgentPlatform::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AgentPlatform::Stub> stub(new AgentPlatform::Stub(channel, options));
  return stub;
}

AgentPlatform::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SignedEndpointHeader_(AgentPlatform_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AgentPlatform::Stub::SignedEndpointHeader(::grpc::ClientContext* context, const ::agent_platform::PlatformEndpointRequest& request, ::agent_platform::PlatformEndpointResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent_platform::PlatformEndpointRequest, ::agent_platform::PlatformEndpointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignedEndpointHeader_, context, request, response);
}

void AgentPlatform::Stub::async::SignedEndpointHeader(::grpc::ClientContext* context, const ::agent_platform::PlatformEndpointRequest* request, ::agent_platform::PlatformEndpointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent_platform::PlatformEndpointRequest, ::agent_platform::PlatformEndpointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignedEndpointHeader_, context, request, response, std::move(f));
}

void AgentPlatform::Stub::async::SignedEndpointHeader(::grpc::ClientContext* context, const ::agent_platform::PlatformEndpointRequest* request, ::agent_platform::PlatformEndpointResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignedEndpointHeader_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent_platform::PlatformEndpointResponse>* AgentPlatform::Stub::PrepareAsyncSignedEndpointHeaderRaw(::grpc::ClientContext* context, const ::agent_platform::PlatformEndpointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent_platform::PlatformEndpointResponse, ::agent_platform::PlatformEndpointRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignedEndpointHeader_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent_platform::PlatformEndpointResponse>* AgentPlatform::Stub::AsyncSignedEndpointHeaderRaw(::grpc::ClientContext* context, const ::agent_platform::PlatformEndpointRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignedEndpointHeaderRaw(context, request, cq);
  result->StartCall();
  return result;
}

AgentPlatform::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgentPlatform_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgentPlatform::Service, ::agent_platform::PlatformEndpointRequest, ::agent_platform::PlatformEndpointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgentPlatform::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent_platform::PlatformEndpointRequest* req,
             ::agent_platform::PlatformEndpointResponse* resp) {
               return service->SignedEndpointHeader(ctx, req, resp);
             }, this)));
}

AgentPlatform::Service::~Service() {
}

::grpc::Status AgentPlatform::Service::SignedEndpointHeader(::grpc::ServerContext* context, const ::agent_platform::PlatformEndpointRequest* request, ::agent_platform::PlatformEndpointResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace agent_platform
#include <grpcpp/ports_undef.inc>

