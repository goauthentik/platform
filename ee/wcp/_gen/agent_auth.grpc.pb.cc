// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: agent_auth.proto

#include "agent_auth.pb.h"
#include "agent_auth.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace agent_auth {

static const char* AgentAuth_method_names[] = {
  "/agent_auth.AgentAuth/WhoAmI",
  "/agent_auth.AgentAuth/GetCurrentToken",
  "/agent_auth.AgentAuth/CachedTokenExchange",
  "/agent_auth.AgentAuth/Authorize",
};

std::unique_ptr< AgentAuth::Stub> AgentAuth::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AgentAuth::Stub> stub(new AgentAuth::Stub(channel, options));
  return stub;
}

AgentAuth::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_WhoAmI_(AgentAuth_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCurrentToken_(AgentAuth_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CachedTokenExchange_(AgentAuth_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Authorize_(AgentAuth_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AgentAuth::Stub::WhoAmI(::grpc::ClientContext* context, const ::agent_auth::WhoAmIRequest& request, ::agent_auth::WhoAmIResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent_auth::WhoAmIRequest, ::agent_auth::WhoAmIResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WhoAmI_, context, request, response);
}

void AgentAuth::Stub::async::WhoAmI(::grpc::ClientContext* context, const ::agent_auth::WhoAmIRequest* request, ::agent_auth::WhoAmIResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent_auth::WhoAmIRequest, ::agent_auth::WhoAmIResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WhoAmI_, context, request, response, std::move(f));
}

void AgentAuth::Stub::async::WhoAmI(::grpc::ClientContext* context, const ::agent_auth::WhoAmIRequest* request, ::agent_auth::WhoAmIResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WhoAmI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent_auth::WhoAmIResponse>* AgentAuth::Stub::PrepareAsyncWhoAmIRaw(::grpc::ClientContext* context, const ::agent_auth::WhoAmIRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent_auth::WhoAmIResponse, ::agent_auth::WhoAmIRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WhoAmI_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent_auth::WhoAmIResponse>* AgentAuth::Stub::AsyncWhoAmIRaw(::grpc::ClientContext* context, const ::agent_auth::WhoAmIRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWhoAmIRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgentAuth::Stub::GetCurrentToken(::grpc::ClientContext* context, const ::agent_auth::CurrentTokenRequest& request, ::agent_auth::CurrentTokenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent_auth::CurrentTokenRequest, ::agent_auth::CurrentTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCurrentToken_, context, request, response);
}

void AgentAuth::Stub::async::GetCurrentToken(::grpc::ClientContext* context, const ::agent_auth::CurrentTokenRequest* request, ::agent_auth::CurrentTokenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent_auth::CurrentTokenRequest, ::agent_auth::CurrentTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentToken_, context, request, response, std::move(f));
}

void AgentAuth::Stub::async::GetCurrentToken(::grpc::ClientContext* context, const ::agent_auth::CurrentTokenRequest* request, ::agent_auth::CurrentTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent_auth::CurrentTokenResponse>* AgentAuth::Stub::PrepareAsyncGetCurrentTokenRaw(::grpc::ClientContext* context, const ::agent_auth::CurrentTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent_auth::CurrentTokenResponse, ::agent_auth::CurrentTokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCurrentToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent_auth::CurrentTokenResponse>* AgentAuth::Stub::AsyncGetCurrentTokenRaw(::grpc::ClientContext* context, const ::agent_auth::CurrentTokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCurrentTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgentAuth::Stub::CachedTokenExchange(::grpc::ClientContext* context, const ::agent_auth::TokenExchangeRequest& request, ::agent_auth::TokenExchangeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent_auth::TokenExchangeRequest, ::agent_auth::TokenExchangeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CachedTokenExchange_, context, request, response);
}

void AgentAuth::Stub::async::CachedTokenExchange(::grpc::ClientContext* context, const ::agent_auth::TokenExchangeRequest* request, ::agent_auth::TokenExchangeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent_auth::TokenExchangeRequest, ::agent_auth::TokenExchangeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CachedTokenExchange_, context, request, response, std::move(f));
}

void AgentAuth::Stub::async::CachedTokenExchange(::grpc::ClientContext* context, const ::agent_auth::TokenExchangeRequest* request, ::agent_auth::TokenExchangeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CachedTokenExchange_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent_auth::TokenExchangeResponse>* AgentAuth::Stub::PrepareAsyncCachedTokenExchangeRaw(::grpc::ClientContext* context, const ::agent_auth::TokenExchangeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent_auth::TokenExchangeResponse, ::agent_auth::TokenExchangeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CachedTokenExchange_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent_auth::TokenExchangeResponse>* AgentAuth::Stub::AsyncCachedTokenExchangeRaw(::grpc::ClientContext* context, const ::agent_auth::TokenExchangeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCachedTokenExchangeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgentAuth::Stub::Authorize(::grpc::ClientContext* context, const ::agent_auth::AuthorizeRequest& request, ::agent_auth::AuthorizeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent_auth::AuthorizeRequest, ::agent_auth::AuthorizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Authorize_, context, request, response);
}

void AgentAuth::Stub::async::Authorize(::grpc::ClientContext* context, const ::agent_auth::AuthorizeRequest* request, ::agent_auth::AuthorizeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent_auth::AuthorizeRequest, ::agent_auth::AuthorizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Authorize_, context, request, response, std::move(f));
}

void AgentAuth::Stub::async::Authorize(::grpc::ClientContext* context, const ::agent_auth::AuthorizeRequest* request, ::agent_auth::AuthorizeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Authorize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent_auth::AuthorizeResponse>* AgentAuth::Stub::PrepareAsyncAuthorizeRaw(::grpc::ClientContext* context, const ::agent_auth::AuthorizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent_auth::AuthorizeResponse, ::agent_auth::AuthorizeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Authorize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent_auth::AuthorizeResponse>* AgentAuth::Stub::AsyncAuthorizeRaw(::grpc::ClientContext* context, const ::agent_auth::AuthorizeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAuthorizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

AgentAuth::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgentAuth_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgentAuth::Service, ::agent_auth::WhoAmIRequest, ::agent_auth::WhoAmIResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgentAuth::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent_auth::WhoAmIRequest* req,
             ::agent_auth::WhoAmIResponse* resp) {
               return service->WhoAmI(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgentAuth_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgentAuth::Service, ::agent_auth::CurrentTokenRequest, ::agent_auth::CurrentTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgentAuth::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent_auth::CurrentTokenRequest* req,
             ::agent_auth::CurrentTokenResponse* resp) {
               return service->GetCurrentToken(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgentAuth_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgentAuth::Service, ::agent_auth::TokenExchangeRequest, ::agent_auth::TokenExchangeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgentAuth::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent_auth::TokenExchangeRequest* req,
             ::agent_auth::TokenExchangeResponse* resp) {
               return service->CachedTokenExchange(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgentAuth_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgentAuth::Service, ::agent_auth::AuthorizeRequest, ::agent_auth::AuthorizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgentAuth::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent_auth::AuthorizeRequest* req,
             ::agent_auth::AuthorizeResponse* resp) {
               return service->Authorize(ctx, req, resp);
             }, this)));
}

AgentAuth::Service::~Service() {
}

::grpc::Status AgentAuth::Service::WhoAmI(::grpc::ServerContext* context, const ::agent_auth::WhoAmIRequest* request, ::agent_auth::WhoAmIResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgentAuth::Service::GetCurrentToken(::grpc::ServerContext* context, const ::agent_auth::CurrentTokenRequest* request, ::agent_auth::CurrentTokenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgentAuth::Service::CachedTokenExchange(::grpc::ServerContext* context, const ::agent_auth::TokenExchangeRequest* request, ::agent_auth::TokenExchangeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgentAuth::Service::Authorize(::grpc::ServerContext* context, const ::agent_auth::AuthorizeRequest* request, ::agent_auth::AuthorizeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace agent_auth
#include <grpcpp/ports_undef.inc>

