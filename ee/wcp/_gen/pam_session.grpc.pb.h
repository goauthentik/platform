// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pam_session.proto
#ifndef GRPC_pam_5fsession_2eproto__INCLUDED
#define GRPC_pam_5fsession_2eproto__INCLUDED

#include "pam_session.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace pam_session {

class SessionManager final {
 public:
  static constexpr char const* service_full_name() {
    return "pam_session.SessionManager";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RegisterSession(::grpc::ClientContext* context, const ::pam_session::RegisterSessionRequest& request, ::pam_session::RegisterSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pam_session::RegisterSessionResponse>> AsyncRegisterSession(::grpc::ClientContext* context, const ::pam_session::RegisterSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pam_session::RegisterSessionResponse>>(AsyncRegisterSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pam_session::RegisterSessionResponse>> PrepareAsyncRegisterSession(::grpc::ClientContext* context, const ::pam_session::RegisterSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pam_session::RegisterSessionResponse>>(PrepareAsyncRegisterSessionRaw(context, request, cq));
    }
    virtual ::grpc::Status SessionStatus(::grpc::ClientContext* context, const ::pam_session::SessionStatusRequest& request, ::pam_session::SessionStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pam_session::SessionStatusResponse>> AsyncSessionStatus(::grpc::ClientContext* context, const ::pam_session::SessionStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pam_session::SessionStatusResponse>>(AsyncSessionStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pam_session::SessionStatusResponse>> PrepareAsyncSessionStatus(::grpc::ClientContext* context, const ::pam_session::SessionStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pam_session::SessionStatusResponse>>(PrepareAsyncSessionStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status CloseSession(::grpc::ClientContext* context, const ::pam_session::CloseSessionRequest& request, ::pam_session::CloseSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pam_session::CloseSessionResponse>> AsyncCloseSession(::grpc::ClientContext* context, const ::pam_session::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pam_session::CloseSessionResponse>>(AsyncCloseSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pam_session::CloseSessionResponse>> PrepareAsyncCloseSession(::grpc::ClientContext* context, const ::pam_session::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pam_session::CloseSessionResponse>>(PrepareAsyncCloseSessionRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void RegisterSession(::grpc::ClientContext* context, const ::pam_session::RegisterSessionRequest* request, ::pam_session::RegisterSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterSession(::grpc::ClientContext* context, const ::pam_session::RegisterSessionRequest* request, ::pam_session::RegisterSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SessionStatus(::grpc::ClientContext* context, const ::pam_session::SessionStatusRequest* request, ::pam_session::SessionStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SessionStatus(::grpc::ClientContext* context, const ::pam_session::SessionStatusRequest* request, ::pam_session::SessionStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CloseSession(::grpc::ClientContext* context, const ::pam_session::CloseSessionRequest* request, ::pam_session::CloseSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CloseSession(::grpc::ClientContext* context, const ::pam_session::CloseSessionRequest* request, ::pam_session::CloseSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pam_session::RegisterSessionResponse>* AsyncRegisterSessionRaw(::grpc::ClientContext* context, const ::pam_session::RegisterSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pam_session::RegisterSessionResponse>* PrepareAsyncRegisterSessionRaw(::grpc::ClientContext* context, const ::pam_session::RegisterSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pam_session::SessionStatusResponse>* AsyncSessionStatusRaw(::grpc::ClientContext* context, const ::pam_session::SessionStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pam_session::SessionStatusResponse>* PrepareAsyncSessionStatusRaw(::grpc::ClientContext* context, const ::pam_session::SessionStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pam_session::CloseSessionResponse>* AsyncCloseSessionRaw(::grpc::ClientContext* context, const ::pam_session::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pam_session::CloseSessionResponse>* PrepareAsyncCloseSessionRaw(::grpc::ClientContext* context, const ::pam_session::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RegisterSession(::grpc::ClientContext* context, const ::pam_session::RegisterSessionRequest& request, ::pam_session::RegisterSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pam_session::RegisterSessionResponse>> AsyncRegisterSession(::grpc::ClientContext* context, const ::pam_session::RegisterSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pam_session::RegisterSessionResponse>>(AsyncRegisterSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pam_session::RegisterSessionResponse>> PrepareAsyncRegisterSession(::grpc::ClientContext* context, const ::pam_session::RegisterSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pam_session::RegisterSessionResponse>>(PrepareAsyncRegisterSessionRaw(context, request, cq));
    }
    ::grpc::Status SessionStatus(::grpc::ClientContext* context, const ::pam_session::SessionStatusRequest& request, ::pam_session::SessionStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pam_session::SessionStatusResponse>> AsyncSessionStatus(::grpc::ClientContext* context, const ::pam_session::SessionStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pam_session::SessionStatusResponse>>(AsyncSessionStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pam_session::SessionStatusResponse>> PrepareAsyncSessionStatus(::grpc::ClientContext* context, const ::pam_session::SessionStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pam_session::SessionStatusResponse>>(PrepareAsyncSessionStatusRaw(context, request, cq));
    }
    ::grpc::Status CloseSession(::grpc::ClientContext* context, const ::pam_session::CloseSessionRequest& request, ::pam_session::CloseSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pam_session::CloseSessionResponse>> AsyncCloseSession(::grpc::ClientContext* context, const ::pam_session::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pam_session::CloseSessionResponse>>(AsyncCloseSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pam_session::CloseSessionResponse>> PrepareAsyncCloseSession(::grpc::ClientContext* context, const ::pam_session::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pam_session::CloseSessionResponse>>(PrepareAsyncCloseSessionRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RegisterSession(::grpc::ClientContext* context, const ::pam_session::RegisterSessionRequest* request, ::pam_session::RegisterSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterSession(::grpc::ClientContext* context, const ::pam_session::RegisterSessionRequest* request, ::pam_session::RegisterSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SessionStatus(::grpc::ClientContext* context, const ::pam_session::SessionStatusRequest* request, ::pam_session::SessionStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void SessionStatus(::grpc::ClientContext* context, const ::pam_session::SessionStatusRequest* request, ::pam_session::SessionStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CloseSession(::grpc::ClientContext* context, const ::pam_session::CloseSessionRequest* request, ::pam_session::CloseSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void CloseSession(::grpc::ClientContext* context, const ::pam_session::CloseSessionRequest* request, ::pam_session::CloseSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::pam_session::RegisterSessionResponse>* AsyncRegisterSessionRaw(::grpc::ClientContext* context, const ::pam_session::RegisterSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pam_session::RegisterSessionResponse>* PrepareAsyncRegisterSessionRaw(::grpc::ClientContext* context, const ::pam_session::RegisterSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pam_session::SessionStatusResponse>* AsyncSessionStatusRaw(::grpc::ClientContext* context, const ::pam_session::SessionStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pam_session::SessionStatusResponse>* PrepareAsyncSessionStatusRaw(::grpc::ClientContext* context, const ::pam_session::SessionStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pam_session::CloseSessionResponse>* AsyncCloseSessionRaw(::grpc::ClientContext* context, const ::pam_session::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pam_session::CloseSessionResponse>* PrepareAsyncCloseSessionRaw(::grpc::ClientContext* context, const ::pam_session::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterSession_;
    const ::grpc::internal::RpcMethod rpcmethod_SessionStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseSession_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RegisterSession(::grpc::ServerContext* context, const ::pam_session::RegisterSessionRequest* request, ::pam_session::RegisterSessionResponse* response);
    virtual ::grpc::Status SessionStatus(::grpc::ServerContext* context, const ::pam_session::SessionStatusRequest* request, ::pam_session::SessionStatusResponse* response);
    virtual ::grpc::Status CloseSession(::grpc::ServerContext* context, const ::pam_session::CloseSessionRequest* request, ::pam_session::CloseSessionResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterSession() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterSession(::grpc::ServerContext* /*context*/, const ::pam_session::RegisterSessionRequest* /*request*/, ::pam_session::RegisterSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterSession(::grpc::ServerContext* context, ::pam_session::RegisterSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::pam_session::RegisterSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SessionStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SessionStatus() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SessionStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionStatus(::grpc::ServerContext* /*context*/, const ::pam_session::SessionStatusRequest* /*request*/, ::pam_session::SessionStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSessionStatus(::grpc::ServerContext* context, ::pam_session::SessionStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::pam_session::SessionStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CloseSession() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CloseSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseSession(::grpc::ServerContext* /*context*/, const ::pam_session::CloseSessionRequest* /*request*/, ::pam_session::CloseSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseSession(::grpc::ServerContext* context, ::pam_session::CloseSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::pam_session::CloseSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterSession<WithAsyncMethod_SessionStatus<WithAsyncMethod_CloseSession<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RegisterSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterSession() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::pam_session::RegisterSessionRequest, ::pam_session::RegisterSessionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pam_session::RegisterSessionRequest* request, ::pam_session::RegisterSessionResponse* response) { return this->RegisterSession(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterSession(
        ::grpc::MessageAllocator< ::pam_session::RegisterSessionRequest, ::pam_session::RegisterSessionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pam_session::RegisterSessionRequest, ::pam_session::RegisterSessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterSession(::grpc::ServerContext* /*context*/, const ::pam_session::RegisterSessionRequest* /*request*/, ::pam_session::RegisterSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterSession(
      ::grpc::CallbackServerContext* /*context*/, const ::pam_session::RegisterSessionRequest* /*request*/, ::pam_session::RegisterSessionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SessionStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SessionStatus() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::pam_session::SessionStatusRequest, ::pam_session::SessionStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pam_session::SessionStatusRequest* request, ::pam_session::SessionStatusResponse* response) { return this->SessionStatus(context, request, response); }));}
    void SetMessageAllocatorFor_SessionStatus(
        ::grpc::MessageAllocator< ::pam_session::SessionStatusRequest, ::pam_session::SessionStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pam_session::SessionStatusRequest, ::pam_session::SessionStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SessionStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionStatus(::grpc::ServerContext* /*context*/, const ::pam_session::SessionStatusRequest* /*request*/, ::pam_session::SessionStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SessionStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::pam_session::SessionStatusRequest* /*request*/, ::pam_session::SessionStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CloseSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CloseSession() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::pam_session::CloseSessionRequest, ::pam_session::CloseSessionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pam_session::CloseSessionRequest* request, ::pam_session::CloseSessionResponse* response) { return this->CloseSession(context, request, response); }));}
    void SetMessageAllocatorFor_CloseSession(
        ::grpc::MessageAllocator< ::pam_session::CloseSessionRequest, ::pam_session::CloseSessionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pam_session::CloseSessionRequest, ::pam_session::CloseSessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CloseSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseSession(::grpc::ServerContext* /*context*/, const ::pam_session::CloseSessionRequest* /*request*/, ::pam_session::CloseSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloseSession(
      ::grpc::CallbackServerContext* /*context*/, const ::pam_session::CloseSessionRequest* /*request*/, ::pam_session::CloseSessionResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RegisterSession<WithCallbackMethod_SessionStatus<WithCallbackMethod_CloseSession<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterSession() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterSession(::grpc::ServerContext* /*context*/, const ::pam_session::RegisterSessionRequest* /*request*/, ::pam_session::RegisterSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SessionStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SessionStatus() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SessionStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionStatus(::grpc::ServerContext* /*context*/, const ::pam_session::SessionStatusRequest* /*request*/, ::pam_session::SessionStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CloseSession() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CloseSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseSession(::grpc::ServerContext* /*context*/, const ::pam_session::CloseSessionRequest* /*request*/, ::pam_session::CloseSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterSession() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterSession(::grpc::ServerContext* /*context*/, const ::pam_session::RegisterSessionRequest* /*request*/, ::pam_session::RegisterSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SessionStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SessionStatus() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SessionStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionStatus(::grpc::ServerContext* /*context*/, const ::pam_session::SessionStatusRequest* /*request*/, ::pam_session::SessionStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSessionStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CloseSession() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CloseSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseSession(::grpc::ServerContext* /*context*/, const ::pam_session::CloseSessionRequest* /*request*/, ::pam_session::CloseSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterSession() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterSession(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterSession(::grpc::ServerContext* /*context*/, const ::pam_session::RegisterSessionRequest* /*request*/, ::pam_session::RegisterSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SessionStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SessionStatus() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SessionStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_SessionStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionStatus(::grpc::ServerContext* /*context*/, const ::pam_session::SessionStatusRequest* /*request*/, ::pam_session::SessionStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SessionStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CloseSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CloseSession() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CloseSession(context, request, response); }));
    }
    ~WithRawCallbackMethod_CloseSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseSession(::grpc::ServerContext* /*context*/, const ::pam_session::CloseSessionRequest* /*request*/, ::pam_session::CloseSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloseSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterSession() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pam_session::RegisterSessionRequest, ::pam_session::RegisterSessionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pam_session::RegisterSessionRequest, ::pam_session::RegisterSessionResponse>* streamer) {
                       return this->StreamedRegisterSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterSession(::grpc::ServerContext* /*context*/, const ::pam_session::RegisterSessionRequest* /*request*/, ::pam_session::RegisterSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pam_session::RegisterSessionRequest,::pam_session::RegisterSessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SessionStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SessionStatus() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pam_session::SessionStatusRequest, ::pam_session::SessionStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pam_session::SessionStatusRequest, ::pam_session::SessionStatusResponse>* streamer) {
                       return this->StreamedSessionStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SessionStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SessionStatus(::grpc::ServerContext* /*context*/, const ::pam_session::SessionStatusRequest* /*request*/, ::pam_session::SessionStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSessionStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pam_session::SessionStatusRequest,::pam_session::SessionStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CloseSession() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pam_session::CloseSessionRequest, ::pam_session::CloseSessionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pam_session::CloseSessionRequest, ::pam_session::CloseSessionResponse>* streamer) {
                       return this->StreamedCloseSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CloseSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseSession(::grpc::ServerContext* /*context*/, const ::pam_session::CloseSessionRequest* /*request*/, ::pam_session::CloseSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pam_session::CloseSessionRequest,::pam_session::CloseSessionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterSession<WithStreamedUnaryMethod_SessionStatus<WithStreamedUnaryMethod_CloseSession<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterSession<WithStreamedUnaryMethod_SessionStatus<WithStreamedUnaryMethod_CloseSession<Service > > > StreamedService;
};

}  // namespace pam_session


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_pam_5fsession_2eproto__INCLUDED
