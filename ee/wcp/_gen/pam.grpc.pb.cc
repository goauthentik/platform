// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pam.proto

#include "pam.pb.h"
#include "pam.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace pam {

static const char* PAM_method_names[] = {
  "/pam.PAM/TokenAuth",
  "/pam.PAM/InteractiveAuth",
  "/pam.PAM/Authorize",
};

std::unique_ptr< PAM::Stub> PAM::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PAM::Stub> stub(new PAM::Stub(channel, options));
  return stub;
}

PAM::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_TokenAuth_(PAM_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InteractiveAuth_(PAM_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Authorize_(PAM_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PAM::Stub::TokenAuth(::grpc::ClientContext* context, const ::pam::TokenAuthRequest& request, ::pam::TokenAuthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pam::TokenAuthRequest, ::pam::TokenAuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TokenAuth_, context, request, response);
}

void PAM::Stub::async::TokenAuth(::grpc::ClientContext* context, const ::pam::TokenAuthRequest* request, ::pam::TokenAuthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pam::TokenAuthRequest, ::pam::TokenAuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TokenAuth_, context, request, response, std::move(f));
}

void PAM::Stub::async::TokenAuth(::grpc::ClientContext* context, const ::pam::TokenAuthRequest* request, ::pam::TokenAuthResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TokenAuth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pam::TokenAuthResponse>* PAM::Stub::PrepareAsyncTokenAuthRaw(::grpc::ClientContext* context, const ::pam::TokenAuthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pam::TokenAuthResponse, ::pam::TokenAuthRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TokenAuth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pam::TokenAuthResponse>* PAM::Stub::AsyncTokenAuthRaw(::grpc::ClientContext* context, const ::pam::TokenAuthRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTokenAuthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PAM::Stub::InteractiveAuth(::grpc::ClientContext* context, const ::pam::InteractiveAuthRequest& request, ::pam::InteractiveChallenge* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pam::InteractiveAuthRequest, ::pam::InteractiveChallenge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InteractiveAuth_, context, request, response);
}

void PAM::Stub::async::InteractiveAuth(::grpc::ClientContext* context, const ::pam::InteractiveAuthRequest* request, ::pam::InteractiveChallenge* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pam::InteractiveAuthRequest, ::pam::InteractiveChallenge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InteractiveAuth_, context, request, response, std::move(f));
}

void PAM::Stub::async::InteractiveAuth(::grpc::ClientContext* context, const ::pam::InteractiveAuthRequest* request, ::pam::InteractiveChallenge* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InteractiveAuth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pam::InteractiveChallenge>* PAM::Stub::PrepareAsyncInteractiveAuthRaw(::grpc::ClientContext* context, const ::pam::InteractiveAuthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pam::InteractiveChallenge, ::pam::InteractiveAuthRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InteractiveAuth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pam::InteractiveChallenge>* PAM::Stub::AsyncInteractiveAuthRaw(::grpc::ClientContext* context, const ::pam::InteractiveAuthRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInteractiveAuthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PAM::Stub::Authorize(::grpc::ClientContext* context, const ::agent_auth::AuthorizeRequest& request, ::pam::PAMAuthorizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent_auth::AuthorizeRequest, ::pam::PAMAuthorizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Authorize_, context, request, response);
}

void PAM::Stub::async::Authorize(::grpc::ClientContext* context, const ::agent_auth::AuthorizeRequest* request, ::pam::PAMAuthorizationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent_auth::AuthorizeRequest, ::pam::PAMAuthorizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Authorize_, context, request, response, std::move(f));
}

void PAM::Stub::async::Authorize(::grpc::ClientContext* context, const ::agent_auth::AuthorizeRequest* request, ::pam::PAMAuthorizationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Authorize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pam::PAMAuthorizationResponse>* PAM::Stub::PrepareAsyncAuthorizeRaw(::grpc::ClientContext* context, const ::agent_auth::AuthorizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pam::PAMAuthorizationResponse, ::agent_auth::AuthorizeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Authorize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pam::PAMAuthorizationResponse>* PAM::Stub::AsyncAuthorizeRaw(::grpc::ClientContext* context, const ::agent_auth::AuthorizeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAuthorizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

PAM::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PAM_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PAM::Service, ::pam::TokenAuthRequest, ::pam::TokenAuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PAM::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pam::TokenAuthRequest* req,
             ::pam::TokenAuthResponse* resp) {
               return service->TokenAuth(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PAM_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PAM::Service, ::pam::InteractiveAuthRequest, ::pam::InteractiveChallenge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PAM::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pam::InteractiveAuthRequest* req,
             ::pam::InteractiveChallenge* resp) {
               return service->InteractiveAuth(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PAM_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PAM::Service, ::agent_auth::AuthorizeRequest, ::pam::PAMAuthorizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PAM::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent_auth::AuthorizeRequest* req,
             ::pam::PAMAuthorizationResponse* resp) {
               return service->Authorize(ctx, req, resp);
             }, this)));
}

PAM::Service::~Service() {
}

::grpc::Status PAM::Service::TokenAuth(::grpc::ServerContext* context, const ::pam::TokenAuthRequest* request, ::pam::TokenAuthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PAM::Service::InteractiveAuth(::grpc::ServerContext* context, const ::pam::InteractiveAuthRequest* request, ::pam::InteractiveChallenge* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PAM::Service::Authorize(::grpc::ServerContext* context, const ::agent_auth::AuthorizeRequest* request, ::pam::PAMAuthorizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pam
#include <grpcpp/ports_undef.inc>

