// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: agent_config.proto

#include "agent_config.pb.h"
#include "agent_config.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace agent_config {

static const char* AgentConfig_method_names[] = {
  "/agent_config.AgentConfig/ListProfiles",
  "/agent_config.AgentConfig/Setup",
};

std::unique_ptr< AgentConfig::Stub> AgentConfig::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AgentConfig::Stub> stub(new AgentConfig::Stub(channel, options));
  return stub;
}

AgentConfig::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ListProfiles_(AgentConfig_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Setup_(AgentConfig_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AgentConfig::Stub::ListProfiles(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::agent_config::ListProfilesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::agent_config::ListProfilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListProfiles_, context, request, response);
}

void AgentConfig::Stub::async::ListProfiles(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::agent_config::ListProfilesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::agent_config::ListProfilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListProfiles_, context, request, response, std::move(f));
}

void AgentConfig::Stub::async::ListProfiles(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::agent_config::ListProfilesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListProfiles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent_config::ListProfilesResponse>* AgentConfig::Stub::PrepareAsyncListProfilesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent_config::ListProfilesResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListProfiles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent_config::ListProfilesResponse>* AgentConfig::Stub::AsyncListProfilesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListProfilesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgentConfig::Stub::Setup(::grpc::ClientContext* context, const ::agent_config::SetupRequest& request, ::agent_config::SetupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent_config::SetupRequest, ::agent_config::SetupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Setup_, context, request, response);
}

void AgentConfig::Stub::async::Setup(::grpc::ClientContext* context, const ::agent_config::SetupRequest* request, ::agent_config::SetupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent_config::SetupRequest, ::agent_config::SetupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Setup_, context, request, response, std::move(f));
}

void AgentConfig::Stub::async::Setup(::grpc::ClientContext* context, const ::agent_config::SetupRequest* request, ::agent_config::SetupResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Setup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent_config::SetupResponse>* AgentConfig::Stub::PrepareAsyncSetupRaw(::grpc::ClientContext* context, const ::agent_config::SetupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent_config::SetupResponse, ::agent_config::SetupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Setup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent_config::SetupResponse>* AgentConfig::Stub::AsyncSetupRaw(::grpc::ClientContext* context, const ::agent_config::SetupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetupRaw(context, request, cq);
  result->StartCall();
  return result;
}

AgentConfig::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgentConfig_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgentConfig::Service, ::google::protobuf::Empty, ::agent_config::ListProfilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgentConfig::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::agent_config::ListProfilesResponse* resp) {
               return service->ListProfiles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgentConfig_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgentConfig::Service, ::agent_config::SetupRequest, ::agent_config::SetupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgentConfig::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent_config::SetupRequest* req,
             ::agent_config::SetupResponse* resp) {
               return service->Setup(ctx, req, resp);
             }, this)));
}

AgentConfig::Service::~Service() {
}

::grpc::Status AgentConfig::Service::ListProfiles(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::agent_config::ListProfilesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgentConfig::Service::Setup(::grpc::ServerContext* context, const ::agent_config::SetupRequest* request, ::agent_config::SetupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace agent_config
#include <grpcpp/ports_undef.inc>

