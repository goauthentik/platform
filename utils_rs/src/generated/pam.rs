// @generated
// This file is @generated by prost-build.
/// Message to encode token for SSH authenticaiton with CLI
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PamAuthentication {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub local_socket: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenAuthRequest {
    #[prost(string, tag = "1")]
    pub username: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenAuthResponse {
    #[prost(bool, tag = "1")]
    pub successful: bool,
    #[prost(message, optional, tag = "2")]
    pub token: ::core::option::Option<super::agent::Token>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InteractiveAuthInitRequest {
    #[prost(string, tag = "1")]
    pub username: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InteractiveAuthContinueRequest {
    #[prost(string, tag = "1")]
    pub txid: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub value: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InteractiveAuthRequest {
    #[prost(oneof = "interactive_auth_request::InteractiveAuth", tags = "1, 2")]
    pub interactive_auth: ::core::option::Option<interactive_auth_request::InteractiveAuth>,
}
/// Nested message and enum types in `InteractiveAuthRequest`.
pub mod interactive_auth_request {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InteractiveAuth {
        #[prost(message, tag = "1")]
        Init(super::InteractiveAuthInitRequest),
        #[prost(message, tag = "2")]
        Continue(super::InteractiveAuthContinueRequest),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InteractiveChallenge {
    #[prost(string, tag = "1")]
    pub txid: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub finished: bool,
    #[prost(enumeration = "InteractiveAuthResult", tag = "3")]
    pub result: i32,
    #[prost(string, tag = "4")]
    pub prompt: ::prost::alloc::string::String,
    #[prost(enumeration = "interactive_challenge::PromptMeta", tag = "5")]
    pub prompt_meta: i32,
    #[prost(string, tag = "6")]
    pub debug_info: ::prost::alloc::string::String,
}
/// Nested message and enum types in `InteractiveChallenge`.
pub mod interactive_challenge {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum PromptMeta {
        Unspecified = 0,
        PamPromptEchoOff = 1,
        PamPromptEchoOn = 2,
        PamErrorMsg = 3,
        PamTextInfo = 4,
        PamRadioType = 5,
        PamBinaryPrompt = 7,
        Password = 100,
    }
    impl PromptMeta {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "UNSPECIFIED",
                Self::PamPromptEchoOff => "PAM_PROMPT_ECHO_OFF",
                Self::PamPromptEchoOn => "PAM_PROMPT_ECHO_ON",
                Self::PamErrorMsg => "PAM_ERROR_MSG",
                Self::PamTextInfo => "PAM_TEXT_INFO",
                Self::PamRadioType => "PAM_RADIO_TYPE",
                Self::PamBinaryPrompt => "PAM_BINARY_PROMPT",
                Self::Password => "PASSWORD",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNSPECIFIED" => Some(Self::Unspecified),
                "PAM_PROMPT_ECHO_OFF" => Some(Self::PamPromptEchoOff),
                "PAM_PROMPT_ECHO_ON" => Some(Self::PamPromptEchoOn),
                "PAM_ERROR_MSG" => Some(Self::PamErrorMsg),
                "PAM_TEXT_INFO" => Some(Self::PamTextInfo),
                "PAM_RADIO_TYPE" => Some(Self::PamRadioType),
                "PAM_BINARY_PROMPT" => Some(Self::PamBinaryPrompt),
                "PASSWORD" => Some(Self::Password),
                _ => None,
            }
        }
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PamAuthorizationResponse {
    #[prost(message, optional, tag = "1")]
    pub response: ::core::option::Option<super::agent_auth::AuthorizeResponse>,
    #[prost(enumeration = "InteractiveAuthResult", tag = "2")]
    pub code: i32,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum InteractiveAuthResult {
    PamSuccess = 0,
    PamPermDenied = 6,
    PamAuthErr = 7,
}
impl InteractiveAuthResult {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PamSuccess => "PAM_SUCCESS",
            Self::PamPermDenied => "PAM_PERM_DENIED",
            Self::PamAuthErr => "PAM_AUTH_ERR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PAM_SUCCESS" => Some(Self::PamSuccess),
            "PAM_PERM_DENIED" => Some(Self::PamPermDenied),
            "PAM_AUTH_ERR" => Some(Self::PamAuthErr),
            _ => None,
        }
    }
}
include!("pam.tonic.rs");
// @@protoc_insertion_point(module)
